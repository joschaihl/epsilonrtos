
ertos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00000ea8  00000f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008001c4  008001c4  000010a0  2**0
                  ALLOC
  3 .stab         00001efc  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d7  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__ctors_end>
   4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  10:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  14:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  18:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  1c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  20:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  24:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  2c:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_11>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  3c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  40:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  44:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  48:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  4c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  50:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>

00000054 <__c.1596>:
  54:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000005f <__c.1594>:
  5f:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000006a <__c.1592>:
  6a:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

00000075 <__c.1590>:
  75:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

00000080 <__c.1588>:
  80:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000008b <__c.1388>:
  8b:	2d 2d 2d 3d 3d 3d 23 23 23 20 54 65 73 74 73 75     ---===### Testsu
  9b:	69 74 65 20 23 23 23 3d 3d 3d 2d 2d 2d 0a 00        ite ###===---..

000000aa <__c.1399>:
  aa:	0a 2d 2d 2d 2d 2d 20 46 69 6e 69 73 68 65 64 20     .----- Finished 
  ba:	54 65 73 74 73 75 69 74 65 20 2d 2d 2d 2d 0a 00     Testsuite ----..

000000ca <__c.1397>:
  ca:	20 72 75 6e 73 20 6f 66 20 00                        runs of .

000000d4 <__c.1395>:
  d4:	0a 45 78 70 65 63 74 65 64 20 00                    .Expected .

000000df <__c.1393>:
  df:	2d 2d 2d 3d 3d 3d 23 23 23 23 20 52 45 53 55 4c     ---===#### RESUL
  ef:	54 53 20 23 23 23 23 3d 3d 3d 2d 2d 2d 0a 45 72     TS ####===---.Er
  ff:	72 6f 72 73 3d 00                                   rors=.

00000105 <__c.1422>:
 105:	46 61 69 6c 75 72 65 0a 00                          Failure..

0000010e <__c.1420>:
 10e:	4f 4b 0a 00                                         OK..

00000112 <__c.1418>:
 112:	2e 2e 2e 20 00                                      ... .

00000117 <__c.1416>:
 117:	43 68 65 63 6b 69 6e 67 20 54 72 61 63 65 70 6f     Checking Tracepo
 127:	69 6e 74 20 00                                      int .

0000012c <__c.1475>:
 12c:	20 45 52 52 4f 52 53 0a 00                           ERRORS..

00000135 <__c.1473>:
 135:	54 65 73 74 73 20 61 62 6f 72 74 65 64 20 62 65     Tests aborted be
 145:	63 61 75 73 65 20 6f 66 20 00                       cause of .

0000014f <__c.1471>:
 14f:	46 61 69 6c 75 72 65 0a 00                          Failure..

00000158 <__c.1469>:
 158:	4f 4b 0a 00                                         OK..

0000015c <__c.1467>:
 15c:	29 2e 2e 2e 20 00                                   )... .

00000162 <__c.1465>:
 162:	2c 00                                               ,.

00000164 <__c.1463>:
 164:	20 61 73 73 65 72 74 47 72 65 61 74 65 72 28 00      assertGreater(.

00000174 <__c.1460>:
 174:	20 61 73 73 65 72 74 47 72 65 61 74 65 72 45 71      assertGreaterEq
 184:	75 61 6c 28 00                                      ual(.

00000189 <__c.1457>:
 189:	20 61 73 73 65 72 74 45 71 75 61 6c 73 28 00         assertEquals(.

00000198 <__c.1454>:
 198:	20 61 73 73 65 72 74 4c 6f 77 65 72 45 71 75 61      assertLowerEqua
 1a8:	6c 28 00                                            l(.

000001ab <__c.1450>:
 1ab:	20 61 73 73 65 72 74 4c 6f 77 65 72 28 00            assertLower(.

000001b9 <__c.1447>:
 1b9:	20 2a 20 00 00                                       * ..

000001be <__ctors_end>:
 1be:	11 24       	eor	r1, r1
 1c0:	1f be       	out	0x3f, r1	; 63
 1c2:	cf e5       	ldi	r28, 0x5F	; 95
 1c4:	d8 e0       	ldi	r29, 0x08	; 8
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	cd bf       	out	0x3d, r28	; 61

000001ca <__do_copy_data>:
 1ca:	11 e0       	ldi	r17, 0x01	; 1
 1cc:	a0 e6       	ldi	r26, 0x60	; 96
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e8 ea       	ldi	r30, 0xA8	; 168
 1d2:	fe e0       	ldi	r31, 0x0E	; 14
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <.do_copy_data_start>

000001d6 <.do_copy_data_loop>:
 1d6:	05 90       	lpm	r0, Z+
 1d8:	0d 92       	st	X+, r0

000001da <.do_copy_data_start>:
 1da:	a4 3c       	cpi	r26, 0xC4	; 196
 1dc:	b1 07       	cpc	r27, r17
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <.do_copy_data_loop>

000001e0 <__do_clear_bss>:
 1e0:	11 e0       	ldi	r17, 0x01	; 1
 1e2:	a4 ec       	ldi	r26, 0xC4	; 196
 1e4:	b1 e0       	ldi	r27, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
 1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
 1ea:	a0 3e       	cpi	r26, 0xE0	; 224
 1ec:	b1 07       	cpc	r27, r17
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>
 1f0:	0e 94 c0 01 	call	0x380	; 0x380 <main>
 1f4:	0c 94 52 07 	jmp	0xea4	; 0xea4 <_exit>

000001f8 <__bad_interrupt>:
 1f8:	0c 94 00 00 	jmp	0x0	; 0x0 <__vectors>

000001fc <setup>:
#define TASKEPIN PB4



void setup(void)
{
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
  sbi(DEFAULTDDR, TASKAPIN);
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKBPIN);
 212:	a7 e3       	ldi	r26, 0x37	; 55
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e7 e3       	ldi	r30, 0x37	; 55
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKCPIN);
 220:	a7 e3       	ldi	r26, 0x37	; 55
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e7 e3       	ldi	r30, 0x37	; 55
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKDPIN);
 22e:	a7 e3       	ldi	r26, 0x37	; 55
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e7 e3       	ldi	r30, 0x37	; 55
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKEPIN);
 23c:	a7 e3       	ldi	r26, 0x37	; 55
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e7 e3       	ldi	r30, 0x37	; 55
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8c 93       	st	X, r24
  setTracepoint(1);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 d9 01 	sts	0x01D9, r24
}
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <task_A>:

u32 a = 0, c=0;
TASK(A,128)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	for(a=0;a < 1000;a++)
 25e:	10 92 c4 01 	sts	0x01C4, r1
 262:	10 92 c5 01 	sts	0x01C5, r1
 266:	10 92 c6 01 	sts	0x01C6, r1
 26a:	10 92 c7 01 	sts	0x01C7, r1
 26e:	3d c0       	rjmp	.+122    	; 0x2ea <task_A+0x94>
	{
	   for(c=0; c<2;c++)
 270:	10 92 c8 01 	sts	0x01C8, r1
 274:	10 92 c9 01 	sts	0x01C9, r1
 278:	10 92 ca 01 	sts	0x01CA, r1
 27c:	10 92 cb 01 	sts	0x01CB, r1
 280:	14 c0       	rjmp	.+40     	; 0x2aa <task_A+0x54>
	   {
	   	nop();
 282:	00 00       	nop
u32 a = 0, c=0;
TASK(A,128)
{
	for(a=0;a < 1000;a++)
	{
	   for(c=0; c<2;c++)
 284:	80 91 c8 01 	lds	r24, 0x01C8
 288:	90 91 c9 01 	lds	r25, 0x01C9
 28c:	a0 91 ca 01 	lds	r26, 0x01CA
 290:	b0 91 cb 01 	lds	r27, 0x01CB
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	a1 1d       	adc	r26, r1
 298:	b1 1d       	adc	r27, r1
 29a:	80 93 c8 01 	sts	0x01C8, r24
 29e:	90 93 c9 01 	sts	0x01C9, r25
 2a2:	a0 93 ca 01 	sts	0x01CA, r26
 2a6:	b0 93 cb 01 	sts	0x01CB, r27
 2aa:	80 91 c8 01 	lds	r24, 0x01C8
 2ae:	90 91 c9 01 	lds	r25, 0x01C9
 2b2:	a0 91 ca 01 	lds	r26, 0x01CA
 2b6:	b0 91 cb 01 	lds	r27, 0x01CB
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	91 05       	cpc	r25, r1
 2be:	a1 05       	cpc	r26, r1
 2c0:	b1 05       	cpc	r27, r1
 2c2:	f8 f2       	brcs	.-66     	; 0x282 <task_A+0x2c>
}

u32 a = 0, c=0;
TASK(A,128)
{
	for(a=0;a < 1000;a++)
 2c4:	80 91 c4 01 	lds	r24, 0x01C4
 2c8:	90 91 c5 01 	lds	r25, 0x01C5
 2cc:	a0 91 c6 01 	lds	r26, 0x01C6
 2d0:	b0 91 c7 01 	lds	r27, 0x01C7
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
 2da:	80 93 c4 01 	sts	0x01C4, r24
 2de:	90 93 c5 01 	sts	0x01C5, r25
 2e2:	a0 93 c6 01 	sts	0x01C6, r26
 2e6:	b0 93 c7 01 	sts	0x01C7, r27
 2ea:	80 91 c4 01 	lds	r24, 0x01C4
 2ee:	90 91 c5 01 	lds	r25, 0x01C5
 2f2:	a0 91 c6 01 	lds	r26, 0x01C6
 2f6:	b0 91 c7 01 	lds	r27, 0x01C7
 2fa:	88 3e       	cpi	r24, 0xE8	; 232
 2fc:	23 e0       	ldi	r18, 0x03	; 3
 2fe:	92 07       	cpc	r25, r18
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	a2 07       	cpc	r26, r18
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	b2 07       	cpc	r27, r18
 308:	08 f4       	brcc	.+2      	; 0x30c <task_A+0xb6>
 30a:	b2 cf       	rjmp	.-156    	; 0x270 <task_A+0x1a>
	   	nop();
	   }
	//	sbi(DEFAULTPORT, TASKAPIN);
	//	cbi(DEFAULTPORT, TASKAPIN);
  	}
  	ENDTASK(A);
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	80 93 0f 01 	sts	0x010F, r24
 312:	00 00       	nop
 314:	fe cf       	rjmp	.-4      	; 0x312 <task_A+0xbc>

00000316 <task_B>:
}

u08 b = 0;
TASK(B,128)
{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	0f 92       	push	r0
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
   u08 i;
	for(b=0;b<2;b++)
 320:	10 92 cc 01 	sts	0x01CC, r1
 324:	21 c0       	rjmp	.+66     	; 0x368 <task_B+0x52>
	{
	   for(i=0; i < 100; i++)
 326:	19 82       	std	Y+1, r1	; 0x01
 328:	11 c0       	rjmp	.+34     	; 0x34c <task_B+0x36>
	   {
			sbi(DEFAULTPORT, TASKBPIN);
 32a:	a8 e3       	ldi	r26, 0x38	; 56
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e8 e3       	ldi	r30, 0x38	; 56
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	8c 93       	st	X, r24
			cbi(DEFAULTPORT, TASKBPIN);
 338:	a8 e3       	ldi	r26, 0x38	; 56
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e8 e3       	ldi	r30, 0x38	; 56
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	8c 93       	st	X, r24
TASK(B,128)
{
   u08 i;
	for(b=0;b<2;b++)
	{
	   for(i=0; i < 100; i++)
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	84 36       	cpi	r24, 0x64	; 100
 350:	60 f3       	brcs	.-40     	; 0x32a <task_B+0x14>
	   {
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
 352:	60 e2       	ldi	r22, 0x20	; 32
 354:	7e e4       	ldi	r23, 0x4E	; 78
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 b8 02 	call	0x570	; 0x570 <sleep>

u08 b = 0;
TASK(B,128)
{
   u08 i;
	for(b=0;b<2;b++)
 35e:	80 91 cc 01 	lds	r24, 0x01CC
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 cc 01 	sts	0x01CC, r24
 368:	80 91 cc 01 	lds	r24, 0x01CC
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	d8 f2       	brcs	.-74     	; 0x326 <task_B+0x10>
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
  	}
  	setTracepoint(2);
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	80 93 d9 01 	sts	0x01D9, r24
  	ENDTASK(B);
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	80 93 bf 01 	sts	0x01BF, r24
 37c:	00 00       	nop
 37e:	fe cf       	rjmp	.-4      	; 0x37c <task_B+0x66>

00000380 <main>:
   checkTracepoint(0);
}
#endif

int main(void)
{
 380:	0f 93       	push	r16
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
   INIT_RTOS();
 38a:	ed e5       	ldi	r30, 0x5D	; 93
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	8f e5       	ldi	r24, 0x5F	; 95
 390:	98 e0       	ldi	r25, 0x08	; 8
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
 396:	00 24       	eor	r0, r0
 398:	11 24       	eor	r1, r1
 39a:	22 24       	eor	r2, r2
 39c:	33 24       	eor	r3, r3
 39e:	44 24       	eor	r4, r4
 3a0:	55 24       	eor	r5, r5
 3a2:	66 24       	eor	r6, r6
 3a4:	77 24       	eor	r7, r7
 3a6:	88 24       	eor	r8, r8
 3a8:	99 24       	eor	r9, r9
 3aa:	aa 24       	eor	r10, r10
 3ac:	bb 24       	eor	r11, r11
 3ae:	cc 24       	eor	r12, r12
 3b0:	dd 24       	eor	r13, r13
 3b2:	ee 24       	eor	r14, r14
 3b4:	ff 24       	eor	r15, r15
 3b6:	00 27       	eor	r16, r16
 3b8:	11 27       	eor	r17, r17
 3ba:	22 27       	eor	r18, r18
 3bc:	33 27       	eor	r19, r19
 3be:	44 27       	eor	r20, r20
 3c0:	55 27       	eor	r21, r21
 3c2:	66 27       	eor	r22, r22
 3c4:	77 27       	eor	r23, r23
 3c6:	88 27       	eor	r24, r24
 3c8:	99 27       	eor	r25, r25
 3ca:	aa 27       	eor	r26, r26
 3cc:	bb 27       	eor	r27, r27
 3ce:	cc 27       	eor	r28, r28
 3d0:	dd 27       	eor	r29, r29
 3d2:	ee 27       	eor	r30, r30
 3d4:	ff 27       	eor	r31, r31
 3d6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <uart_init>
	RUN(assertionsNoFailure);
	checkTracepoint(7);
	suiteend();
#endif

   suite();
 3da:	0e 94 a0 05 	call	0xb40	; 0xb40 <suite>
   assertEquals(0,a);
 3de:	20 e8       	ldi	r18, 0x80	; 128
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	80 91 c4 01 	lds	r24, 0x01C4
 3e6:	90 91 c5 01 	lds	r25, 0x01C5
 3ea:	a0 91 c6 01 	lds	r26, 0x01C6
 3ee:	b0 91 c7 01 	lds	r27, 0x01C7
 3f2:	fc 01       	movw	r30, r24
 3f4:	c9 01       	movw	r24, r18
 3f6:	6b e7       	ldi	r22, 0x7B	; 123
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	9f 01       	movw	r18, r30
 400:	02 e0       	ldi	r16, 0x02	; 2
 402:	0e 94 25 06 	call	0xc4a	; 0xc4a <assertion>
   assertEquals(0,b);
 406:	25 e7       	ldi	r18, 0x75	; 117
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	80 91 cc 01 	lds	r24, 0x01CC
 40e:	e8 2f       	mov	r30, r24
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	c9 01       	movw	r24, r18
 414:	6c e7       	ldi	r22, 0x7C	; 124
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	9f 01       	movw	r18, r30
 41e:	02 e0       	ldi	r16, 0x02	; 2
 420:	0e 94 25 06 	call	0xc4a	; 0xc4a <assertion>
	setup();
 424:	0e 94 fe 00 	call	0x1fc	; 0x1fc <setup>
	checkTracepoint(1);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <checkTracepoint>
	startRRScheduler(taskset, TASK_AMOUNT);
 42e:	80 ec       	ldi	r24, 0xC0	; 192
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	0e 94 8b 03 	call	0x716	; 0x716 <startRRScheduler>
	assertEquals(a, 1000);
 438:	2a e6       	ldi	r18, 0x6A	; 106
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	80 91 c4 01 	lds	r24, 0x01C4
 440:	90 91 c5 01 	lds	r25, 0x01C5
 444:	a0 91 c6 01 	lds	r26, 0x01C6
 448:	b0 91 c7 01 	lds	r27, 0x01C7
 44c:	ac 01       	movw	r20, r24
 44e:	c9 01       	movw	r24, r18
 450:	60 e8       	ldi	r22, 0x80	; 128
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	28 ee       	ldi	r18, 0xE8	; 232
 456:	33 e0       	ldi	r19, 0x03	; 3
 458:	02 e0       	ldi	r16, 0x02	; 2
 45a:	0e 94 25 06 	call	0xc4a	; 0xc4a <assertion>
   assertEquals(b,2);
 45e:	2f e5       	ldi	r18, 0x5F	; 95
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	80 91 cc 01 	lds	r24, 0x01CC
 466:	48 2f       	mov	r20, r24
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	c9 01       	movw	r24, r18
 46c:	61 e8       	ldi	r22, 0x81	; 129
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	22 e0       	ldi	r18, 0x02	; 2
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	02 e0       	ldi	r16, 0x02	; 2
 476:	0e 94 25 06 	call	0xc4a	; 0xc4a <assertion>
   assertEquals(c,2);
 47a:	24 e5       	ldi	r18, 0x54	; 84
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	80 91 c8 01 	lds	r24, 0x01C8
 482:	90 91 c9 01 	lds	r25, 0x01C9
 486:	a0 91 ca 01 	lds	r26, 0x01CA
 48a:	b0 91 cb 01 	lds	r27, 0x01CB
 48e:	ac 01       	movw	r20, r24
 490:	c9 01       	movw	r24, r18
 492:	62 e8       	ldi	r22, 0x82	; 130
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	22 e0       	ldi	r18, 0x02	; 2
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	02 e0       	ldi	r16, 0x02	; 2
 49c:	0e 94 25 06 	call	0xc4a	; 0xc4a <assertion>
   checkTracepoint(2);
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <checkTracepoint>
	suiteend();	
 4a6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <suiteend>
	
	do{
	  nop();
 4aa:	00 00       	nop
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <main+0x12a>

000004ae <initTask>:
TIME currentTime = {0, 0, 0, 0, 0};

SCHEDULER currentScheduler;

void initTask(TASK *task)
{
 4ae:	df 93       	push	r29
 4b0:	cf 93       	push	r28
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <initTask+0x6>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <initTask+0x8>
 4b6:	0f 92       	push	r0
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	9d 83       	std	Y+5, r25	; 0x05
 4be:	8c 83       	std	Y+4, r24	; 0x04
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
 4c0:	ec 81       	ldd	r30, Y+4	; 0x04
 4c2:	fd 81       	ldd	r31, Y+5	; 0x05
 4c4:	85 85       	ldd	r24, Z+13	; 0x0d
 4c6:	88 23       	and	r24, r24
 4c8:	09 f0       	breq	.+2      	; 0x4cc <initTask+0x1e>
 4ca:	4a c0       	rjmp	.+148    	; 0x560 <initTask+0xb2>
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
 4cc:	1b 82       	std	Y+3, r1	; 0x03
 4ce:	0e c0       	rjmp	.+28     	; 0x4ec <initTask+0x3e>
       {
          task->stack[i] = 0;
 4d0:	ec 81       	ldd	r30, Y+4	; 0x04
 4d2:	fd 81       	ldd	r31, Y+5	; 0x05
 4d4:	24 81       	ldd	r18, Z+4	; 0x04
 4d6:	35 81       	ldd	r19, Z+5	; 0x05
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	e8 0f       	add	r30, r24
 4e2:	f9 1f       	adc	r31, r25
 4e4:	10 82       	st	Z, r1
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	8b 83       	std	Y+3, r24	; 0x03
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	ec 81       	ldd	r30, Y+4	; 0x04
 4f4:	fd 81       	ldd	r31, Y+5	; 0x05
 4f6:	80 85       	ldd	r24, Z+8	; 0x08
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 97       	sbiw	r24, 0x02	; 2
 4fe:	28 17       	cp	r18, r24
 500:	39 07       	cpc	r19, r25
 502:	34 f3       	brlt	.-52     	; 0x4d0 <initTask+0x22>
       {
          task->stack[i] = 0;
       }
       pc_high = (task->programmCounter >> 8);
 504:	ec 81       	ldd	r30, Y+4	; 0x04
 506:	fd 81       	ldd	r31, Y+5	; 0x05
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	93 81       	ldd	r25, Z+3	; 0x03
 50c:	89 2f       	mov	r24, r25
 50e:	99 27       	eor	r25, r25
 510:	8a 83       	std	Y+2, r24	; 0x02
       pc_low =  0xff & task->programmCounter;
 512:	ec 81       	ldd	r30, Y+4	; 0x04
 514:	fd 81       	ldd	r31, Y+5	; 0x05
 516:	82 81       	ldd	r24, Z+2	; 0x02
 518:	93 81       	ldd	r25, Z+3	; 0x03
 51a:	89 83       	std	Y+1, r24	; 0x01
       i++;
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	8b 83       	std	Y+3, r24	; 0x03
       task->stack[i] = pc_high;
 522:	ec 81       	ldd	r30, Y+4	; 0x04
 524:	fd 81       	ldd	r31, Y+5	; 0x05
 526:	24 81       	ldd	r18, Z+4	; 0x04
 528:	35 81       	ldd	r19, Z+5	; 0x05
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	e8 0f       	add	r30, r24
 534:	f9 1f       	adc	r31, r25
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	80 83       	st	Z, r24
       i++;
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	8b 83       	std	Y+3, r24	; 0x03
       task->stack[i] = pc_low;
 540:	ec 81       	ldd	r30, Y+4	; 0x04
 542:	fd 81       	ldd	r31, Y+5	; 0x05
 544:	24 81       	ldd	r18, Z+4	; 0x04
 546:	35 81       	ldd	r19, Z+5	; 0x05
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	f9 01       	movw	r30, r18
 550:	e8 0f       	add	r30, r24
 552:	f9 1f       	adc	r31, r25
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	80 83       	st	Z, r24
		 // Set Task Ready
		 task->taskState = TASK_RUNNING;		
 558:	ec 81       	ldd	r30, Y+4	; 0x04
 55a:	fd 81       	ldd	r31, Y+5	; 0x05
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	85 87       	std	Z+13, r24	; 0x0d
	}
}
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <sleep>:

void sleep(u32 pause_us)
{
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	27 97       	sbiw	r28, 0x07	; 7
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	6c 83       	std	Y+4, r22	; 0x04
 586:	7d 83       	std	Y+5, r23	; 0x05
 588:	8e 83       	std	Y+6, r24	; 0x06
 58a:	9f 83       	std	Y+7, r25	; 0x07
	TASK *task;
	BOOL pause = 0;
 58c:	19 82       	std	Y+1, r1	; 0x01
	task = currentScheduler.tasks[currentScheduler.current_task];
 58e:	20 91 da 01 	lds	r18, 0x01DA
 592:	30 91 db 01 	lds	r19, 0x01DB
 596:	80 91 dc 01 	lds	r24, 0x01DC
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	f9 01       	movw	r30, r18
 5a4:	e8 0f       	add	r30, r24
 5a6:	f9 1f       	adc	r31, r25
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	9b 83       	std	Y+3, r25	; 0x03
 5ae:	8a 83       	std	Y+2, r24	; 0x02
	//if(task->taskState == TASK_RUNNING)
	//{
	  // cli();
		task->pause_us = pause_us;
 5b0:	ea 81       	ldd	r30, Y+2	; 0x02
 5b2:	fb 81       	ldd	r31, Y+3	; 0x03
 5b4:	8c 81       	ldd	r24, Y+4	; 0x04
 5b6:	9d 81       	ldd	r25, Y+5	; 0x05
 5b8:	ae 81       	ldd	r26, Y+6	; 0x06
 5ba:	bf 81       	ldd	r27, Y+7	; 0x07
 5bc:	81 87       	std	Z+9, r24	; 0x09
 5be:	92 87       	std	Z+10, r25	; 0x0a
 5c0:	a3 87       	std	Z+11, r26	; 0x0b
 5c2:	b4 87       	std	Z+12, r27	; 0x0c
		task->taskState = TASK_PAUSE;
 5c4:	ea 81       	ldd	r30, Y+2	; 0x02
 5c6:	fb 81       	ldd	r31, Y+3	; 0x03
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	85 87       	std	Z+13, r24	; 0x0d
	//	sei();
		
		do
		{
			pause = (currentScheduler.tasks[currentScheduler.current_task]->taskState == TASK_PAUSE);
 5cc:	20 91 da 01 	lds	r18, 0x01DA
 5d0:	30 91 db 01 	lds	r19, 0x01DB
 5d4:	80 91 dc 01 	lds	r24, 0x01DC
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	f9 01       	movw	r30, r18
 5e2:	e8 0f       	add	r30, r24
 5e4:	f9 1f       	adc	r31, r25
 5e6:	01 90       	ld	r0, Z+
 5e8:	f0 81       	ld	r31, Z
 5ea:	e0 2d       	mov	r30, r0
 5ec:	85 85       	ldd	r24, Z+13	; 0x0d
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <sleep+0x88>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	89 83       	std	Y+1, r24	; 0x01
		} while(pause);
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	88 23       	and	r24, r24
 5fc:	39 f7       	brne	.-50     	; 0x5cc <sleep+0x5c>
	//}
}
 5fe:	27 96       	adiw	r28, 0x07	; 7
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <decrementPause>:

void decrementPause(void)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	00 d0       	rcall	.+0      	; 0x616 <decrementPause+0x6>
 616:	0f 92       	push	r0
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 61c:	1b 82       	std	Y+3, r1	; 0x03
 61e:	3e c0       	rjmp	.+124    	; 0x69c <decrementPause+0x8c>
	{
		task = currentScheduler.tasks[i];
 620:	20 91 da 01 	lds	r18, 0x01DA
 624:	30 91 db 01 	lds	r19, 0x01DB
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	f9 01       	movw	r30, r18
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	9a 83       	std	Y+2, r25	; 0x02
 63e:	89 83       	std	Y+1, r24	; 0x01
		if(task->taskState == TASK_PAUSE)
 640:	e9 81       	ldd	r30, Y+1	; 0x01
 642:	fa 81       	ldd	r31, Y+2	; 0x02
 644:	85 85       	ldd	r24, Z+13	; 0x0d
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	31 f5       	brne	.+76     	; 0x696 <decrementPause+0x86>
		{
      	if(task->pause_us <= TIMER_DELAY_US)
 64a:	e9 81       	ldd	r30, Y+1	; 0x01
 64c:	fa 81       	ldd	r31, Y+2	; 0x02
 64e:	81 85       	ldd	r24, Z+9	; 0x09
 650:	92 85       	ldd	r25, Z+10	; 0x0a
 652:	a3 85       	ldd	r26, Z+11	; 0x0b
 654:	b4 85       	ldd	r27, Z+12	; 0x0c
 656:	8b 3f       	cpi	r24, 0xFB	; 251
 658:	91 05       	cpc	r25, r1
 65a:	a1 05       	cpc	r26, r1
 65c:	b1 05       	cpc	r27, r1
 65e:	58 f4       	brcc	.+22     	; 0x676 <decrementPause+0x66>
      	{
      		task->pause_us = 0;
 660:	e9 81       	ldd	r30, Y+1	; 0x01
 662:	fa 81       	ldd	r31, Y+2	; 0x02
 664:	11 86       	std	Z+9, r1	; 0x09
 666:	12 86       	std	Z+10, r1	; 0x0a
 668:	13 86       	std	Z+11, r1	; 0x0b
 66a:	14 86       	std	Z+12, r1	; 0x0c
      		task->taskState = TASK_RUNNING;
 66c:	e9 81       	ldd	r30, Y+1	; 0x01
 66e:	fa 81       	ldd	r31, Y+2	; 0x02
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	85 87       	std	Z+13, r24	; 0x0d
 674:	10 c0       	rjmp	.+32     	; 0x696 <decrementPause+0x86>
      	}
      	else
      	{
      		task->pause_us -= TIMER_DELAY_US;
 676:	e9 81       	ldd	r30, Y+1	; 0x01
 678:	fa 81       	ldd	r31, Y+2	; 0x02
 67a:	81 85       	ldd	r24, Z+9	; 0x09
 67c:	92 85       	ldd	r25, Z+10	; 0x0a
 67e:	a3 85       	ldd	r26, Z+11	; 0x0b
 680:	b4 85       	ldd	r27, Z+12	; 0x0c
 682:	8a 5f       	subi	r24, 0xFA	; 250
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	a0 40       	sbci	r26, 0x00	; 0
 688:	b0 40       	sbci	r27, 0x00	; 0
 68a:	e9 81       	ldd	r30, Y+1	; 0x01
 68c:	fa 81       	ldd	r31, Y+2	; 0x02
 68e:	81 87       	std	Z+9, r24	; 0x09
 690:	92 87       	std	Z+10, r25	; 0x0a
 692:	a3 87       	std	Z+11, r26	; 0x0b
 694:	b4 87       	std	Z+12, r27	; 0x0c

void decrementPause(void)
{
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	8f 5f       	subi	r24, 0xFF	; 255
 69a:	8b 83       	std	Y+3, r24	; 0x03
 69c:	90 91 dd 01 	lds	r25, 0x01DD
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	89 17       	cp	r24, r25
 6a4:	08 f4       	brcc	.+2      	; 0x6a8 <decrementPause+0x98>
 6a6:	bc cf       	rjmp	.-136    	; 0x620 <decrementPause+0x10>
      	{
      		task->pause_us -= TIMER_DELAY_US;
      	}
      }
	}
}
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <allTasksFinished>:

BOOL allTasksFinished(void)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <allTasksFinished+0x6>
 6ba:	00 d0       	rcall	.+0      	; 0x6bc <allTasksFinished+0x8>
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
   u08 i;
   TASK *task;
   BOOL result = 1;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 6c4:	1c 82       	std	Y+4, r1	; 0x04
 6c6:	1a c0       	rjmp	.+52     	; 0x6fc <allTasksFinished+0x48>
	{
		task = currentScheduler.tasks[i];
 6c8:	20 91 da 01 	lds	r18, 0x01DA
 6cc:	30 91 db 01 	lds	r19, 0x01DB
 6d0:	8c 81       	ldd	r24, Y+4	; 0x04
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	f9 01       	movw	r30, r18
 6dc:	e8 0f       	add	r30, r24
 6de:	f9 1f       	adc	r31, r25
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	9b 83       	std	Y+3, r25	; 0x03
 6e6:	8a 83       	std	Y+2, r24	; 0x02
		if(task->taskState != TASK_FINISHED)
 6e8:	ea 81       	ldd	r30, Y+2	; 0x02
 6ea:	fb 81       	ldd	r31, Y+3	; 0x03
 6ec:	85 85       	ldd	r24, Z+13	; 0x0d
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	11 f0       	breq	.+4      	; 0x6f6 <allTasksFinished+0x42>
		{
			result = 0;
 6f2:	19 82       	std	Y+1, r1	; 0x01
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <allTasksFinished+0x52>
BOOL allTasksFinished(void)
{
   u08 i;
   TASK *task;
   BOOL result = 1;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 6f6:	8c 81       	ldd	r24, Y+4	; 0x04
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	8c 83       	std	Y+4, r24	; 0x04
 6fc:	90 91 dd 01 	lds	r25, 0x01DD
 700:	8c 81       	ldd	r24, Y+4	; 0x04
 702:	89 17       	cp	r24, r25
 704:	08 f3       	brcs	.-62     	; 0x6c8 <allTasksFinished+0x14>
		{
			result = 0;
			break;
		}
	}
	return (result);
 706:	89 81       	ldd	r24, Y+1	; 0x01
}
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <startRRScheduler>:

void startRRScheduler(TASK **tasks, u08 tasks_length)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	00 d0       	rcall	.+0      	; 0x71c <startRRScheduler+0x6>
 71c:	00 d0       	rcall	.+0      	; 0x71e <startRRScheduler+0x8>
 71e:	0f 92       	push	r0
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	9c 83       	std	Y+4, r25	; 0x04
 726:	8b 83       	std	Y+3, r24	; 0x03
 728:	6d 83       	std	Y+5, r22	; 0x05
	currentScheduler.stackPointer = SP + 7;
 72a:	ed e5       	ldi	r30, 0x5D	; 93
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	91 81       	ldd	r25, Z+1	; 0x01
 732:	07 96       	adiw	r24, 0x07	; 7
 734:	90 93 df 01 	sts	0x01DF, r25
 738:	80 93 de 01 	sts	0x01DE, r24
   TASK *task;
	currentScheduler.current_task = 0;
 73c:	10 92 dc 01 	sts	0x01DC, r1
	currentScheduler.tasks = tasks;
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	9c 81       	ldd	r25, Y+4	; 0x04
 744:	90 93 db 01 	sts	0x01DB, r25
 748:	80 93 da 01 	sts	0x01DA, r24
	currentScheduler.tasks_length = tasks_length;
 74c:	8d 81       	ldd	r24, Y+5	; 0x05
 74e:	80 93 dd 01 	sts	0x01DD, r24

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
 752:	10 92 dc 01 	sts	0x01DC, r1
 756:	1a c0       	rjmp	.+52     	; 0x78c <startRRScheduler+0x76>
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
 758:	20 91 da 01 	lds	r18, 0x01DA
 75c:	30 91 db 01 	lds	r19, 0x01DB
 760:	80 91 dc 01 	lds	r24, 0x01DC
 764:	88 2f       	mov	r24, r24
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	f9 01       	movw	r30, r18
 76e:	e8 0f       	add	r30, r24
 770:	f9 1f       	adc	r31, r25
 772:	80 81       	ld	r24, Z
 774:	91 81       	ldd	r25, Z+1	; 0x01
 776:	9a 83       	std	Y+2, r25	; 0x02
 778:	89 83       	std	Y+1, r24	; 0x01
      initTask(task);
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	0e 94 57 02 	call	0x4ae	; 0x4ae <initTask>
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
 782:	80 91 dc 01 	lds	r24, 0x01DC
 786:	8f 5f       	subi	r24, 0xFF	; 255
 788:	80 93 dc 01 	sts	0x01DC, r24
	currentScheduler.tasks = tasks;
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
 78c:	90 91 dc 01 	lds	r25, 0x01DC
 790:	80 91 dd 01 	lds	r24, 0x01DD
 794:	98 17       	cp	r25, r24
 796:	00 f3       	brcs	.-64     	; 0x758 <startRRScheduler+0x42>
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
      initTask(task);
	}
	currentScheduler.current_task = 0;
 798:	10 92 dc 01 	sts	0x01DC, r1
   task = currentScheduler.tasks[0];
 79c:	e0 91 da 01 	lds	r30, 0x01DA
 7a0:	f0 91 db 01 	lds	r31, 0x01DB
 7a4:	80 81       	ld	r24, Z
 7a6:	91 81       	ldd	r25, Z+1	; 0x01
 7a8:	9a 83       	std	Y+2, r25	; 0x02
 7aa:	89 83       	std	Y+1, r24	; 0x01
	initTimer();
 7ac:	e3 e5       	ldi	r30, 0x53	; 83
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	80 83       	st	Z, r24
 7b4:	e9 e5       	ldi	r30, 0x59	; 89
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	80 83       	st	Z, r24
 7bc:	78 94       	sei

	set_stackpointer(task->stackPointer + WORKING_REGISTERS);
 7be:	ad e5       	ldi	r26, 0x5D	; 93
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e9 81       	ldd	r30, Y+1	; 0x01
 7c4:	fa 81       	ldd	r31, Y+2	; 0x02
 7c6:	86 81       	ldd	r24, Z+6	; 0x06
 7c8:	97 81       	ldd	r25, Z+7	; 0x07
 7ca:	80 96       	adiw	r24, 0x20	; 32
 7cc:	11 96       	adiw	r26, 0x01	; 1
 7ce:	9c 93       	st	X, r25
 7d0:	8e 93       	st	-X, r24
	task->taskFunction();
 7d2:	e9 81       	ldd	r30, Y+1	; 0x01
 7d4:	fa 81       	ldd	r31, Y+2	; 0x02
 7d6:	01 90       	ld	r0, Z+
 7d8:	f0 81       	ld	r31, Z
 7da:	e0 2d       	mov	r30, r0
 7dc:	09 95       	icall
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	cf 91       	pop	r28
 7ea:	df 91       	pop	r29
 7ec:	08 95       	ret

000007ee <nextScheduleItem>:

void nextScheduleItem(void)
{
 7ee:	df 93       	push	r29
 7f0:	cf 93       	push	r28
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
	}
	for(i=0; i < currentScheduler.current_task; i++)
	{
		task = currentScheduler.tasks[i];
	}           */
	if (currentScheduler.current_task < (currentScheduler.tasks_length -1))
 7f6:	80 91 dc 01 	lds	r24, 0x01DC
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	80 91 dd 01 	lds	r24, 0x01DD
 802:	88 2f       	mov	r24, r24
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	28 17       	cp	r18, r24
 80a:	39 07       	cpc	r19, r25
 80c:	34 f4       	brge	.+12     	; 0x81a <nextScheduleItem+0x2c>
	{
		currentScheduler.current_task++;
 80e:	80 91 dc 01 	lds	r24, 0x01DC
 812:	8f 5f       	subi	r24, 0xFF	; 255
 814:	80 93 dc 01 	sts	0x01DC, r24
 818:	02 c0       	rjmp	.+4      	; 0x81e <nextScheduleItem+0x30>
	}
	else
	{
		currentScheduler.current_task = 0;
 81a:	10 92 dc 01 	sts	0x01DC, r1
	}
	// (pop) reset task specific registers
}
 81e:	cf 91       	pop	r28
 820:	df 91       	pop	r29
 822:	08 95       	ret

00000824 <incrementTime>:

void incrementTime(void)
{
 824:	df 93       	push	r29
 826:	cf 93       	push	r28
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
   if((currentTime.us+TIMER_DELAY_US)==1000)
 82c:	80 91 d2 01 	lds	r24, 0x01D2
 830:	90 91 d3 01 	lds	r25, 0x01D3
 834:	22 e0       	ldi	r18, 0x02	; 2
 836:	8e 3e       	cpi	r24, 0xEE	; 238
 838:	92 07       	cpc	r25, r18
 83a:	09 f0       	breq	.+2      	; 0x83e <incrementTime+0x1a>
 83c:	42 c0       	rjmp	.+132    	; 0x8c2 <__stack+0x63>
   {
   	if((currentTime.ms+1)==1000)
 83e:	80 91 d0 01 	lds	r24, 0x01D0
 842:	90 91 d1 01 	lds	r25, 0x01D1
 846:	23 e0       	ldi	r18, 0x03	; 3
 848:	87 3e       	cpi	r24, 0xE7	; 231
 84a:	92 07       	cpc	r25, r18
 84c:	61 f5       	brne	.+88     	; 0x8a6 <__stack+0x47>
   	{
   	   if((currentTime.seconds+1)==60)
 84e:	80 91 cf 01 	lds	r24, 0x01CF
 852:	8b 33       	cpi	r24, 0x3B	; 59
 854:	e1 f4       	brne	.+56     	; 0x88e <__stack+0x2f>
   	   {
   	   	if((currentTime.minutes+1)==60)
 856:	80 91 ce 01 	lds	r24, 0x01CE
 85a:	8b 33       	cpi	r24, 0x3B	; 59
 85c:	61 f4       	brne	.+24     	; 0x876 <__stack+0x17>
   	   	{
   	   		currentTime.hours = (currentTime.hours+1) % 24;
 85e:	80 91 cd 01 	lds	r24, 0x01CD
 862:	88 2f       	mov	r24, r24
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	28 e1       	ldi	r18, 0x18	; 24
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	b9 01       	movw	r22, r18
 86e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__divmodhi4>
 872:	80 93 cd 01 	sts	0x01CD, r24
   	   	}
   	   	currentTime.minutes = (currentTime.minutes+1) % 60;
 876:	80 91 ce 01 	lds	r24, 0x01CE
 87a:	88 2f       	mov	r24, r24
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	2c e3       	ldi	r18, 0x3C	; 60
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	b9 01       	movw	r22, r18
 886:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__divmodhi4>
 88a:	80 93 ce 01 	sts	0x01CE, r24
   	   }
   	   currentTime.seconds = (currentTime.seconds+1) % 60;
 88e:	80 91 cf 01 	lds	r24, 0x01CF
 892:	88 2f       	mov	r24, r24
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	2c e3       	ldi	r18, 0x3C	; 60
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	b9 01       	movw	r22, r18
 89e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__divmodhi4>
 8a2:	80 93 cf 01 	sts	0x01CF, r24
   	}
   	currentTime.ms = (currentTime.ms+1) % 1000;
 8a6:	80 91 d0 01 	lds	r24, 0x01D0
 8aa:	90 91 d1 01 	lds	r25, 0x01D1
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	28 ee       	ldi	r18, 0xE8	; 232
 8b2:	33 e0       	ldi	r19, 0x03	; 3
 8b4:	b9 01       	movw	r22, r18
 8b6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__udivmodhi4>
 8ba:	90 93 d1 01 	sts	0x01D1, r25
 8be:	80 93 d0 01 	sts	0x01D0, r24
   }
   currentTime.us = (currentTime.us+TIMER_DELAY_US) % 1000;
 8c2:	80 91 d2 01 	lds	r24, 0x01D2
 8c6:	90 91 d3 01 	lds	r25, 0x01D3
 8ca:	86 50       	subi	r24, 0x06	; 6
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	28 ee       	ldi	r18, 0xE8	; 232
 8d0:	33 e0       	ldi	r19, 0x03	; 3
 8d2:	b9 01       	movw	r22, r18
 8d4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__udivmodhi4>
 8d8:	90 93 d3 01 	sts	0x01D3, r25
 8dc:	80 93 d2 01 	sts	0x01D2, r24
}
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <__vector_11>:

SCHEDULER_TIMER()
{  // Testen ob nicht alle Tasks beendet worden sind
	// falls ja:
	if(!allTasksFinished())
 8e6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <allTasksFinished>
 8ea:	88 23       	and	r24, r24
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <__vector_11+0xa>
 8ee:	7a c0       	rjmp	.+244    	; 0x9e4 <__vector_11+0xfe>
	{
   	save_registers();
 8f0:	0f 92       	push	r0
 8f2:	1f 92       	push	r1
 8f4:	2f 92       	push	r2
 8f6:	3f 92       	push	r3
 8f8:	4f 92       	push	r4
 8fa:	5f 92       	push	r5
 8fc:	6f 92       	push	r6
 8fe:	7f 92       	push	r7
 900:	8f 92       	push	r8
 902:	9f 92       	push	r9
 904:	af 92       	push	r10
 906:	bf 92       	push	r11
 908:	cf 92       	push	r12
 90a:	df 92       	push	r13
 90c:	ef 92       	push	r14
 90e:	ff 92       	push	r15
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	2f 93       	push	r18
 916:	3f 93       	push	r19
 918:	4f 93       	push	r20
 91a:	5f 93       	push	r21
 91c:	6f 93       	push	r22
 91e:	7f 93       	push	r23
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	ef 93       	push	r30
 92e:	ff 93       	push	r31
		TASK *task;
		task = currentScheduler.tasks[currentScheduler.current_task];
 930:	20 91 da 01 	lds	r18, 0x01DA
 934:	30 91 db 01 	lds	r19, 0x01DB
 938:	80 91 dc 01 	lds	r24, 0x01DC
 93c:	88 2f       	mov	r24, r24
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	f9 01       	movw	r30, r18
 946:	e8 0f       	add	r30, r24
 948:	f9 1f       	adc	r31, r25
 94a:	80 81       	ld	r24, Z
 94c:	91 81       	ldd	r25, Z+1	; 0x01
 94e:	9a 83       	std	Y+2, r25	; 0x02
 950:	89 83       	std	Y+1, r24	; 0x01

	// Stackpointer vom letzten task sichern
		task->stackPointer = get_stackpointer();
 952:	ed e5       	ldi	r30, 0x5D	; 93
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	91 81       	ldd	r25, Z+1	; 0x01
 95a:	e9 81       	ldd	r30, Y+1	; 0x01
 95c:	fa 81       	ldd	r31, Y+2	; 0x02
 95e:	97 83       	std	Z+7, r25	; 0x07
 960:	86 83       	std	Z+6, r24	; 0x06
		incrementTime();
 962:	0e 94 12 04 	call	0x824	; 0x824 <incrementTime>
		decrementPause();
 966:	0e 94 08 03 	call	0x610	; 0x610 <decrementPause>

	
		nextScheduleItem();
 96a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <nextScheduleItem>
  		task = currentScheduler.tasks[currentScheduler.current_task];
 96e:	20 91 da 01 	lds	r18, 0x01DA
 972:	30 91 db 01 	lds	r19, 0x01DB
 976:	80 91 dc 01 	lds	r24, 0x01DC
 97a:	88 2f       	mov	r24, r24
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	f9 01       	movw	r30, r18
 984:	e8 0f       	add	r30, r24
 986:	f9 1f       	adc	r31, r25
 988:	80 81       	ld	r24, Z
 98a:	91 81       	ldd	r25, Z+1	; 0x01
 98c:	9a 83       	std	Y+2, r25	; 0x02
 98e:	89 83       	std	Y+1, r24	; 0x01
		set_stackpointer(task->stackPointer);
 990:	ad e5       	ldi	r26, 0x5D	; 93
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	e9 81       	ldd	r30, Y+1	; 0x01
 996:	fa 81       	ldd	r31, Y+2	; 0x02
 998:	86 81       	ldd	r24, Z+6	; 0x06
 99a:	97 81       	ldd	r25, Z+7	; 0x07
 99c:	11 96       	adiw	r26, 0x01	; 1
 99e:	9c 93       	st	X, r25
 9a0:	8e 93       	st	-X, r24
		load_registers();
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	ff 90       	pop	r15
 9c4:	ef 90       	pop	r14
 9c6:	df 90       	pop	r13
 9c8:	cf 90       	pop	r12
 9ca:	bf 90       	pop	r11
 9cc:	af 90       	pop	r10
 9ce:	9f 90       	pop	r9
 9d0:	8f 90       	pop	r8
 9d2:	7f 90       	pop	r7
 9d4:	6f 90       	pop	r6
 9d6:	5f 90       	pop	r5
 9d8:	4f 90       	pop	r4
 9da:	3f 90       	pop	r3
 9dc:	2f 90       	pop	r2
 9de:	1f 90       	pop	r1
 9e0:	0f 90       	pop	r0
 9e2:	0b c0       	rjmp	.+22     	; 0x9fa <__vector_11+0x114>
	}
	else
	{ /* Kein Task mehr da */
	 	// Stackpointer setzen
		set_stackpointer(currentScheduler.stackPointer);
 9e4:	ed e5       	ldi	r30, 0x5D	; 93
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 91 de 01 	lds	r24, 0x01DE
 9ec:	90 91 df 01 	lds	r25, 0x01DF
 9f0:	91 83       	std	Z+1, r25	; 0x01
 9f2:	80 83       	st	Z, r24
		// Timer deaktivieren
		disableTimer();
 9f4:	e9 e5       	ldi	r30, 0x59	; 89
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	10 82       	st	Z, r1
	}
   return_interrupt();
 9fa:	18 95       	reti

000009fc <uart_init>:


/* UART-Init Bsp. ATmega16 */

void uart_init(void)
{
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
  UBRRH = UBRR_VAL >> 8;
 a04:	e0 e4       	ldi	r30, 0x40	; 64
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	10 82       	st	Z, r1
  UBRRL = UBRR_VAL & 0xFF;
 a0a:	e9 e2       	ldi	r30, 0x29	; 41
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 83       	st	Z, r24

  UCSRB |= (1<<TXEN);  // UART TX einschalten
 a12:	aa e2       	ldi	r26, 0x2A	; 42
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	ea e2       	ldi	r30, 0x2A	; 42
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	80 81       	ld	r24, Z
 a1c:	88 60       	ori	r24, 0x08	; 8
 a1e:	8c 93       	st	X, r24
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // Asynchron 8N1
 a20:	e0 e4       	ldi	r30, 0x40	; 64
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	86 e8       	ldi	r24, 0x86	; 134
 a26:	80 83       	st	Z, r24
}
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	08 95       	ret

00000a2e <uart_putc>:

/* ATmega16 */
int uart_putc(unsigned char c)
{
 a2e:	df 93       	push	r29
 a30:	cf 93       	push	r28
 a32:	0f 92       	push	r0
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich */
 a3a:	eb e2       	ldi	r30, 0x2B	; 43
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	80 72       	andi	r24, 0x20	; 32
 a46:	90 70       	andi	r25, 0x00	; 0
 a48:	00 97       	sbiw	r24, 0x00	; 0
 a4a:	b9 f3       	breq	.-18     	; 0xa3a <uart_putc+0xc>
    {
    }

    UDR = c;                      /* sende Zeichen */
 a4c:	ec e2       	ldi	r30, 0x2C	; 44
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	80 83       	st	Z, r24
    return 0;
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	90 e0       	ldi	r25, 0x00	; 0
}
 a58:	0f 90       	pop	r0
 a5a:	cf 91       	pop	r28
 a5c:	df 91       	pop	r29
 a5e:	08 95       	ret

00000a60 <uart_puts>:


/* puts ist unabhaengig vom Controllertyp */
void uart_puts (char *s)
{
 a60:	df 93       	push	r29
 a62:	cf 93       	push	r28
 a64:	00 d0       	rcall	.+0      	; 0xa66 <uart_puts+0x6>
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
 a6a:	9a 83       	std	Y+2, r25	; 0x02
 a6c:	89 83       	std	Y+1, r24	; 0x01
 a6e:	0a c0       	rjmp	.+20     	; 0xa84 <uart_puts+0x24>
    while (*s)
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        uart_putc(*s);
 a70:	e9 81       	ldd	r30, Y+1	; 0x01
 a72:	fa 81       	ldd	r31, Y+2	; 0x02
 a74:	80 81       	ld	r24, Z
 a76:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
        s++;
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	9a 81       	ldd	r25, Y+2	; 0x02
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	9a 83       	std	Y+2, r25	; 0x02
 a82:	89 83       	std	Y+1, r24	; 0x01


/* puts ist unabhaengig vom Controllertyp */
void uart_puts (char *s)
{
    while (*s)
 a84:	e9 81       	ldd	r30, Y+1	; 0x01
 a86:	fa 81       	ldd	r31, Y+2	; 0x02
 a88:	80 81       	ld	r24, Z
 a8a:	88 23       	and	r24, r24
 a8c:	89 f7       	brne	.-30     	; 0xa70 <uart_puts+0x10>
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        uart_putc(*s);
        s++;
    }
}
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <uart_putd>:

void uart_putd(int intvalue)
{
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
 aa0:	2d 97       	sbiw	r28, 0x0d	; 13
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	9d 87       	std	Y+13, r25	; 0x0d
 aae:	8c 87       	std	Y+12, r24	; 0x0c
    char strbuf[11];
    itoa(intvalue, strbuf, 10);
 ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
 ab2:	9d 85       	ldd	r25, Y+13	; 0x0d
 ab4:	9e 01       	movw	r18, r28
 ab6:	2f 5f       	subi	r18, 0xFF	; 255
 ab8:	3f 4f       	sbci	r19, 0xFF	; 255
 aba:	b9 01       	movw	r22, r18
 abc:	4a e0       	ldi	r20, 0x0A	; 10
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	0e 94 21 07 	call	0xe42	; 0xe42 <itoa>
    uart_puts(strbuf);
 ac4:	ce 01       	movw	r24, r28
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	0e 94 30 05 	call	0xa60	; 0xa60 <uart_puts>
}
 acc:	2d 96       	adiw	r28, 0x0d	; 13
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	de bf       	out	0x3e, r29	; 62
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	cd bf       	out	0x3d, r28	; 61
 ad8:	cf 91       	pop	r28
 ada:	df 91       	pop	r29
 adc:	08 95       	ret

00000ade <uart_puts_p>:

void uart_puts_p(const char *str){
 ade:	df 93       	push	r29
 ae0:	cf 93       	push	r28
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	28 97       	sbiw	r28, 0x08	; 8
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	98 87       	std	Y+8, r25	; 0x08
 af4:	8f 83       	std	Y+7, r24	; 0x07
 af6:	10 c0       	rjmp	.+32     	; 0xb18 <uart_puts_p+0x3a>
	while(pgm_read_byte(str) != '\0'){
		uart_putc(pgm_read_byte(str++));
 af8:	8f 81       	ldd	r24, Y+7	; 0x07
 afa:	98 85       	ldd	r25, Y+8	; 0x08
 afc:	9e 83       	std	Y+6, r25	; 0x06
 afe:	8d 83       	std	Y+5, r24	; 0x05
 b00:	8f 81       	ldd	r24, Y+7	; 0x07
 b02:	98 85       	ldd	r25, Y+8	; 0x08
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	98 87       	std	Y+8, r25	; 0x08
 b08:	8f 83       	std	Y+7, r24	; 0x07
 b0a:	ed 81       	ldd	r30, Y+5	; 0x05
 b0c:	fe 81       	ldd	r31, Y+6	; 0x06
 b0e:	84 91       	lpm	r24, Z+
 b10:	8c 83       	std	Y+4, r24	; 0x04
 b12:	8c 81       	ldd	r24, Y+4	; 0x04
 b14:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
    itoa(intvalue, strbuf, 10);
    uart_puts(strbuf);
}

void uart_puts_p(const char *str){
	while(pgm_read_byte(str) != '\0'){
 b18:	8f 81       	ldd	r24, Y+7	; 0x07
 b1a:	98 85       	ldd	r25, Y+8	; 0x08
 b1c:	9b 83       	std	Y+3, r25	; 0x03
 b1e:	8a 83       	std	Y+2, r24	; 0x02
 b20:	ea 81       	ldd	r30, Y+2	; 0x02
 b22:	fb 81       	ldd	r31, Y+3	; 0x03
 b24:	84 91       	lpm	r24, Z+
 b26:	89 83       	std	Y+1, r24	; 0x01
 b28:	89 81       	ldd	r24, Y+1	; 0x01
 b2a:	88 23       	and	r24, r24
 b2c:	29 f7       	brne	.-54     	; 0xaf8 <uart_puts_p+0x1a>
		uart_putc(pgm_read_byte(str++));
	}
}
 b2e:	28 96       	adiw	r28, 0x08	; 8
 b30:	0f b6       	in	r0, 0x3f	; 63
 b32:	f8 94       	cli
 b34:	de bf       	out	0x3e, r29	; 62
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	cd bf       	out	0x3d, r28	; 61
 b3a:	cf 91       	pop	r28
 b3c:	df 91       	pop	r29
 b3e:	08 95       	ret

00000b40 <suite>:
u08 gruns = 0;
u08 tracepoint = 0;


void suite(void)
{
 b40:	df 93       	push	r29
 b42:	cf 93       	push	r28
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
		  errors = 0;
 b48:	10 92 d4 01 	sts	0x01D4, r1
		  gerrors = 0;
 b4c:	10 92 d7 01 	sts	0x01D7, r1
		  runs = 0;
 b50:	10 92 d5 01 	sts	0x01D5, r1
		  gruns = 0;
 b54:	10 92 d8 01 	sts	0x01D8, r1
		  expected_runs = 0;
 b58:	10 92 d6 01 	sts	0x01D6, r1
		  uart_puts_p(PSTR("---===### Testsuite ###===---\n"));
 b5c:	8b e8       	ldi	r24, 0x8B	; 139
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
}
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	08 95       	ret

00000b6a <suiteend>:

void suiteend(void)
{
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
		  gerrors += errors;
 b72:	90 91 d7 01 	lds	r25, 0x01D7
 b76:	80 91 d4 01 	lds	r24, 0x01D4
 b7a:	89 0f       	add	r24, r25
 b7c:	80 93 d7 01 	sts	0x01D7, r24
		  gruns += runs;
 b80:	90 91 d8 01 	lds	r25, 0x01D8
 b84:	80 91 d5 01 	lds	r24, 0x01D5
 b88:	89 0f       	add	r24, r25
 b8a:	80 93 d8 01 	sts	0x01D8, r24
		  uart_puts_p(PSTR("---===#### RESULTS ####===---\nErrors="));
 b8e:	8f ed       	ldi	r24, 0xDF	; 223
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		  uart_putd(gerrors);
 b96:	80 91 d7 01 	lds	r24, 0x01D7
 b9a:	88 2f       	mov	r24, r24
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
		  uart_puts_p(PSTR("\nExpected "));
 ba2:	84 ed       	ldi	r24, 0xD4	; 212
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		  uart_putd(expected_runs);
 baa:	80 91 d6 01 	lds	r24, 0x01D6
 bae:	88 2f       	mov	r24, r24
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
		  uart_puts_p(PSTR(" runs of "));
 bb6:	8a ec       	ldi	r24, 0xCA	; 202
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		  uart_putd(gruns);
 bbe:	80 91 d8 01 	lds	r24, 0x01D8
 bc2:	88 2f       	mov	r24, r24
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
		  uart_puts_p(PSTR("\n----- Finished Testsuite ----\n"));
 bca:	8a ea       	ldi	r24, 0xAA	; 170
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
}
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	08 95       	ret

00000bd8 <checkTracepoint>:

void checkTracepoint(u08 ptracepoint)
{
 bd8:	df 93       	push	r29
 bda:	cf 93       	push	r28
 bdc:	0f 92       	push	r0
 bde:	cd b7       	in	r28, 0x3d	; 61
 be0:	de b7       	in	r29, 0x3e	; 62
 be2:	89 83       	std	Y+1, r24	; 0x01
	expected_runs++;
 be4:	80 91 d6 01 	lds	r24, 0x01D6
 be8:	8f 5f       	subi	r24, 0xFF	; 255
 bea:	80 93 d6 01 	sts	0x01D6, r24
	if(errors==0)
 bee:	80 91 d4 01 	lds	r24, 0x01D4
 bf2:	88 23       	and	r24, r24
 bf4:	31 f5       	brne	.+76     	; 0xc42 <checkTracepoint+0x6a>
	{
		runs++;
 bf6:	80 91 d5 01 	lds	r24, 0x01D5
 bfa:	8f 5f       	subi	r24, 0xFF	; 255
 bfc:	80 93 d5 01 	sts	0x01D5, r24
  		uart_puts_p(PSTR("Checking Tracepoint "));
 c00:	87 e1       	ldi	r24, 0x17	; 23
 c02:	91 e0       	ldi	r25, 0x01	; 1
 c04:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
   	uart_putd(tracepoint);
 c08:	80 91 d9 01 	lds	r24, 0x01D9
 c0c:	88 2f       	mov	r24, r24
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
   	uart_puts_p(PSTR("... "));	
 c14:	82 e1       	ldi	r24, 0x12	; 18
 c16:	91 e0       	ldi	r25, 0x01	; 1
 c18:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		if(tracepoint==ptracepoint)
 c1c:	90 91 d9 01 	lds	r25, 0x01D9
 c20:	89 81       	ldd	r24, Y+1	; 0x01
 c22:	98 17       	cp	r25, r24
 c24:	29 f4       	brne	.+10     	; 0xc30 <checkTracepoint+0x58>
		{
			uart_puts_p(PSTR("OK\n"));
 c26:	8e e0       	ldi	r24, 0x0E	; 14
 c28:	91 e0       	ldi	r25, 0x01	; 1
 c2a:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <checkTracepoint+0x6a>
		}
		else
		{
			errors++;
 c30:	80 91 d4 01 	lds	r24, 0x01D4
 c34:	8f 5f       	subi	r24, 0xFF	; 255
 c36:	80 93 d4 01 	sts	0x01D4, r24
			uart_puts_p(PSTR("Failure\n"));
 c3a:	85 e0       	ldi	r24, 0x05	; 5
 c3c:	91 e0       	ldi	r25, 0x01	; 1
 c3e:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		}
	}
}
 c42:	0f 90       	pop	r0
 c44:	cf 91       	pop	r28
 c46:	df 91       	pop	r29
 c48:	08 95       	ret

00000c4a <assertion>:

void assertion(const char *file, int line, int expected, int current, COMPARE_OPERATION compare_operator)
{
 c4a:	0f 93       	push	r16
 c4c:	df 93       	push	r29
 c4e:	cf 93       	push	r28
 c50:	cd b7       	in	r28, 0x3d	; 61
 c52:	de b7       	in	r29, 0x3e	; 62
 c54:	2c 97       	sbiw	r28, 0x0c	; 12
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	f8 94       	cli
 c5a:	de bf       	out	0x3e, r29	; 62
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	cd bf       	out	0x3d, r28	; 61
 c60:	9b 83       	std	Y+3, r25	; 0x03
 c62:	8a 83       	std	Y+2, r24	; 0x02
 c64:	7d 83       	std	Y+5, r23	; 0x05
 c66:	6c 83       	std	Y+4, r22	; 0x04
 c68:	5f 83       	std	Y+7, r21	; 0x07
 c6a:	4e 83       	std	Y+6, r20	; 0x06
 c6c:	39 87       	std	Y+9, r19	; 0x09
 c6e:	28 87       	std	Y+8, r18	; 0x08
 c70:	0a 87       	std	Y+10, r16	; 0x0a
   BOOL result = 0;
 c72:	19 82       	std	Y+1, r1	; 0x01
	expected_runs++;
 c74:	80 91 d6 01 	lds	r24, 0x01D6
 c78:	8f 5f       	subi	r24, 0xFF	; 255
 c7a:	80 93 d6 01 	sts	0x01D6, r24
	if(errors==0) {
 c7e:	80 91 d4 01 	lds	r24, 0x01D4
 c82:	88 23       	and	r24, r24
 c84:	09 f0       	breq	.+2      	; 0xc88 <assertion+0x3e>
 c86:	ac c0       	rjmp	.+344    	; 0xde0 <assertion+0x196>
		 runs++;
 c88:	80 91 d5 01 	lds	r24, 0x01D5
 c8c:	8f 5f       	subi	r24, 0xFF	; 255
 c8e:	80 93 d5 01 	sts	0x01D5, r24
		 uart_puts_p(PSTR(" * "));
 c92:	89 eb       	ldi	r24, 0xB9	; 185
 c94:	91 e0       	ldi	r25, 0x01	; 1
 c96:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		 uart_puts_p(file);
 c9a:	8a 81       	ldd	r24, Y+2	; 0x02
 c9c:	9b 81       	ldd	r25, Y+3	; 0x03
 c9e:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
		 uart_putc(':');
 ca2:	8a e3       	ldi	r24, 0x3A	; 58
 ca4:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
       uart_putd(line);
 ca8:	8c 81       	ldd	r24, Y+4	; 0x04
 caa:	9d 81       	ldd	r25, Y+5	; 0x05
 cac:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>

       switch(compare_operator) {
 cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
 cb2:	28 2f       	mov	r18, r24
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	3c 87       	std	Y+12, r19	; 0x0c
 cb8:	2b 87       	std	Y+11, r18	; 0x0b
 cba:	8b 85       	ldd	r24, Y+11	; 0x0b
 cbc:	9c 85       	ldd	r25, Y+12	; 0x0c
 cbe:	82 30       	cpi	r24, 0x02	; 2
 cc0:	91 05       	cpc	r25, r1
 cc2:	b1 f1       	breq	.+108    	; 0xd30 <assertion+0xe6>
 cc4:	2b 85       	ldd	r18, Y+11	; 0x0b
 cc6:	3c 85       	ldd	r19, Y+12	; 0x0c
 cc8:	23 30       	cpi	r18, 0x03	; 3
 cca:	31 05       	cpc	r19, r1
 ccc:	54 f4       	brge	.+20     	; 0xce2 <assertion+0x98>
 cce:	8b 85       	ldd	r24, Y+11	; 0x0b
 cd0:	9c 85       	ldd	r25, Y+12	; 0x0c
 cd2:	00 97       	sbiw	r24, 0x00	; 0
 cd4:	89 f0       	breq	.+34     	; 0xcf8 <assertion+0xae>
 cd6:	2b 85       	ldd	r18, Y+11	; 0x0b
 cd8:	3c 85       	ldd	r19, Y+12	; 0x0c
 cda:	21 30       	cpi	r18, 0x01	; 1
 cdc:	31 05       	cpc	r19, r1
 cde:	d1 f0       	breq	.+52     	; 0xd14 <assertion+0xca>
 ce0:	50 c0       	rjmp	.+160    	; 0xd82 <assertion+0x138>
 ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
 ce4:	9c 85       	ldd	r25, Y+12	; 0x0c
 ce6:	83 30       	cpi	r24, 0x03	; 3
 ce8:	91 05       	cpc	r25, r1
 cea:	81 f1       	breq	.+96     	; 0xd4c <assertion+0x102>
 cec:	2b 85       	ldd	r18, Y+11	; 0x0b
 cee:	3c 85       	ldd	r19, Y+12	; 0x0c
 cf0:	24 30       	cpi	r18, 0x04	; 4
 cf2:	31 05       	cpc	r19, r1
 cf4:	c9 f1       	breq	.+114    	; 0xd68 <assertion+0x11e>
 cf6:	45 c0       	rjmp	.+138    	; 0xd82 <assertion+0x138>
          case LOWER_THAN:
             uart_puts_p(PSTR(" assertLower("));
 cf8:	8b ea       	ldi	r24, 0xAB	; 171
 cfa:	91 e0       	ldi	r25, 0x01	; 1
 cfc:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
             if(expected<current)
 d00:	2e 81       	ldd	r18, Y+6	; 0x06
 d02:	3f 81       	ldd	r19, Y+7	; 0x07
 d04:	88 85       	ldd	r24, Y+8	; 0x08
 d06:	99 85       	ldd	r25, Y+9	; 0x09
 d08:	28 17       	cp	r18, r24
 d0a:	39 07       	cpc	r19, r25
 d0c:	d4 f5       	brge	.+116    	; 0xd82 <assertion+0x138>
             	result = 1;
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	89 83       	std	Y+1, r24	; 0x01
 d12:	37 c0       	rjmp	.+110    	; 0xd82 <assertion+0x138>
             break;
          case LOWER_EQUAL_THAN:
          	 uart_puts_p(PSTR(" assertLowerEqual("));
 d14:	88 e9       	ldi	r24, 0x98	; 152
 d16:	91 e0       	ldi	r25, 0x01	; 1
 d18:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
             if(expected<=current)
 d1c:	2e 81       	ldd	r18, Y+6	; 0x06
 d1e:	3f 81       	ldd	r19, Y+7	; 0x07
 d20:	88 85       	ldd	r24, Y+8	; 0x08
 d22:	99 85       	ldd	r25, Y+9	; 0x09
 d24:	82 17       	cp	r24, r18
 d26:	93 07       	cpc	r25, r19
 d28:	64 f1       	brlt	.+88     	; 0xd82 <assertion+0x138>
               result = 1;
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	89 83       	std	Y+1, r24	; 0x01
 d2e:	29 c0       	rjmp	.+82     	; 0xd82 <assertion+0x138>
             break;
          case EQUALS:
             uart_puts_p(PSTR(" assertEquals("));
 d30:	89 e8       	ldi	r24, 0x89	; 137
 d32:	91 e0       	ldi	r25, 0x01	; 1
 d34:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
             if(expected==current)
 d38:	2e 81       	ldd	r18, Y+6	; 0x06
 d3a:	3f 81       	ldd	r19, Y+7	; 0x07
 d3c:	88 85       	ldd	r24, Y+8	; 0x08
 d3e:	99 85       	ldd	r25, Y+9	; 0x09
 d40:	28 17       	cp	r18, r24
 d42:	39 07       	cpc	r19, r25
 d44:	f1 f4       	brne	.+60     	; 0xd82 <assertion+0x138>
               result = 1;
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	89 83       	std	Y+1, r24	; 0x01
 d4a:	1b c0       	rjmp	.+54     	; 0xd82 <assertion+0x138>
             break;
          case GREATER_EQUAL_THAN:
          	 uart_puts_p(PSTR(" assertGreaterEqual("));
 d4c:	84 e7       	ldi	r24, 0x74	; 116
 d4e:	91 e0       	ldi	r25, 0x01	; 1
 d50:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
             if(expected>=current)
 d54:	2e 81       	ldd	r18, Y+6	; 0x06
 d56:	3f 81       	ldd	r19, Y+7	; 0x07
 d58:	88 85       	ldd	r24, Y+8	; 0x08
 d5a:	99 85       	ldd	r25, Y+9	; 0x09
 d5c:	28 17       	cp	r18, r24
 d5e:	39 07       	cpc	r19, r25
 d60:	84 f0       	brlt	.+32     	; 0xd82 <assertion+0x138>
               result = 1;
 d62:	81 e0       	ldi	r24, 0x01	; 1
 d64:	89 83       	std	Y+1, r24	; 0x01
 d66:	0d c0       	rjmp	.+26     	; 0xd82 <assertion+0x138>
             break;
          case GREATER_THAN:
             uart_puts_p(PSTR(" assertGreater("));
 d68:	84 e6       	ldi	r24, 0x64	; 100
 d6a:	91 e0       	ldi	r25, 0x01	; 1
 d6c:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
             if(expected>current)
 d70:	2e 81       	ldd	r18, Y+6	; 0x06
 d72:	3f 81       	ldd	r19, Y+7	; 0x07
 d74:	88 85       	ldd	r24, Y+8	; 0x08
 d76:	99 85       	ldd	r25, Y+9	; 0x09
 d78:	82 17       	cp	r24, r18
 d7a:	93 07       	cpc	r25, r19
 d7c:	14 f4       	brge	.+4      	; 0xd82 <assertion+0x138>
               result = 1;
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	89 83       	std	Y+1, r24	; 0x01
		 }
		
		
       uart_putd(expected);
 d82:	8e 81       	ldd	r24, Y+6	; 0x06
 d84:	9f 81       	ldd	r25, Y+7	; 0x07
 d86:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
       uart_puts_p(PSTR(","));
 d8a:	82 e6       	ldi	r24, 0x62	; 98
 d8c:	91 e0       	ldi	r25, 0x01	; 1
 d8e:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
       uart_putd(current);
 d92:	88 85       	ldd	r24, Y+8	; 0x08
 d94:	99 85       	ldd	r25, Y+9	; 0x09
 d96:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
       uart_puts_p(PSTR(")... "));
 d9a:	8c e5       	ldi	r24, 0x5C	; 92
 d9c:	91 e0       	ldi	r25, 0x01	; 1
 d9e:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
       if(result)
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	88 23       	and	r24, r24
 da6:	29 f0       	breq	.+10     	; 0xdb2 <assertion+0x168>
       {
       	uart_puts_p(PSTR("OK\n"));      	
 da8:	88 e5       	ldi	r24, 0x58	; 88
 daa:	91 e0       	ldi	r25, 0x01	; 1
 dac:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
 db0:	17 c0       	rjmp	.+46     	; 0xde0 <assertion+0x196>
       }
       else
       {
        	   uart_puts_p(PSTR("Failure\n"));
 db2:	8f e4       	ldi	r24, 0x4F	; 79
 db4:	91 e0       	ldi	r25, 0x01	; 1
 db6:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
           errors++;
 dba:	80 91 d4 01 	lds	r24, 0x01D4
 dbe:	8f 5f       	subi	r24, 0xFF	; 255
 dc0:	80 93 d4 01 	sts	0x01D4, r24
       	    uart_puts_p(PSTR("Tests aborted because of "));
 dc4:	85 e3       	ldi	r24, 0x35	; 53
 dc6:	91 e0       	ldi	r25, 0x01	; 1
 dc8:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
           uart_putd(errors);
 dcc:	80 91 d4 01 	lds	r24, 0x01D4
 dd0:	88 2f       	mov	r24, r24
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	0e 94 4c 05 	call	0xa98	; 0xa98 <uart_putd>
           uart_puts_p(PSTR(" ERRORS\n"));
 dd8:	8c e2       	ldi	r24, 0x2C	; 44
 dda:	91 e0       	ldi	r25, 0x01	; 1
 ddc:	0e 94 6f 05 	call	0xade	; 0xade <uart_puts_p>
       }
   }
}
 de0:	2c 96       	adiw	r28, 0x0c	; 12
 de2:	0f b6       	in	r0, 0x3f	; 63
 de4:	f8 94       	cli
 de6:	de bf       	out	0x3e, r29	; 62
 de8:	0f be       	out	0x3f, r0	; 63
 dea:	cd bf       	out	0x3d, r28	; 61
 dec:	cf 91       	pop	r28
 dee:	df 91       	pop	r29
 df0:	0f 91       	pop	r16
 df2:	08 95       	ret

00000df4 <__udivmodhi4>:
 df4:	aa 1b       	sub	r26, r26
 df6:	bb 1b       	sub	r27, r27
 df8:	51 e1       	ldi	r21, 0x11	; 17
 dfa:	07 c0       	rjmp	.+14     	; 0xe0a <__udivmodhi4_ep>

00000dfc <__udivmodhi4_loop>:
 dfc:	aa 1f       	adc	r26, r26
 dfe:	bb 1f       	adc	r27, r27
 e00:	a6 17       	cp	r26, r22
 e02:	b7 07       	cpc	r27, r23
 e04:	10 f0       	brcs	.+4      	; 0xe0a <__udivmodhi4_ep>
 e06:	a6 1b       	sub	r26, r22
 e08:	b7 0b       	sbc	r27, r23

00000e0a <__udivmodhi4_ep>:
 e0a:	88 1f       	adc	r24, r24
 e0c:	99 1f       	adc	r25, r25
 e0e:	5a 95       	dec	r21
 e10:	a9 f7       	brne	.-22     	; 0xdfc <__udivmodhi4_loop>
 e12:	80 95       	com	r24
 e14:	90 95       	com	r25
 e16:	bc 01       	movw	r22, r24
 e18:	cd 01       	movw	r24, r26
 e1a:	08 95       	ret

00000e1c <__divmodhi4>:
 e1c:	97 fb       	bst	r25, 7
 e1e:	09 2e       	mov	r0, r25
 e20:	07 26       	eor	r0, r23
 e22:	0a d0       	rcall	.+20     	; 0xe38 <__divmodhi4_neg1>
 e24:	77 fd       	sbrc	r23, 7
 e26:	04 d0       	rcall	.+8      	; 0xe30 <__divmodhi4_neg2>
 e28:	e5 df       	rcall	.-54     	; 0xdf4 <__udivmodhi4>
 e2a:	06 d0       	rcall	.+12     	; 0xe38 <__divmodhi4_neg1>
 e2c:	00 20       	and	r0, r0
 e2e:	1a f4       	brpl	.+6      	; 0xe36 <__divmodhi4_exit>

00000e30 <__divmodhi4_neg2>:
 e30:	70 95       	com	r23
 e32:	61 95       	neg	r22
 e34:	7f 4f       	sbci	r23, 0xFF	; 255

00000e36 <__divmodhi4_exit>:
 e36:	08 95       	ret

00000e38 <__divmodhi4_neg1>:
 e38:	f6 f7       	brtc	.-4      	; 0xe36 <__divmodhi4_exit>
 e3a:	90 95       	com	r25
 e3c:	81 95       	neg	r24
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	08 95       	ret

00000e42 <itoa>:
 e42:	fb 01       	movw	r30, r22
 e44:	9f 01       	movw	r18, r30
 e46:	e8 94       	clt
 e48:	42 30       	cpi	r20, 0x02	; 2
 e4a:	c4 f0       	brlt	.+48     	; 0xe7c <itoa+0x3a>
 e4c:	45 32       	cpi	r20, 0x25	; 37
 e4e:	b4 f4       	brge	.+44     	; 0xe7c <itoa+0x3a>
 e50:	4a 30       	cpi	r20, 0x0A	; 10
 e52:	29 f4       	brne	.+10     	; 0xe5e <itoa+0x1c>
 e54:	97 fb       	bst	r25, 7
 e56:	1e f4       	brtc	.+6      	; 0xe5e <itoa+0x1c>
 e58:	90 95       	com	r25
 e5a:	81 95       	neg	r24
 e5c:	9f 4f       	sbci	r25, 0xFF	; 255
 e5e:	64 2f       	mov	r22, r20
 e60:	77 27       	eor	r23, r23
 e62:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__udivmodhi4>
 e66:	80 5d       	subi	r24, 0xD0	; 208
 e68:	8a 33       	cpi	r24, 0x3A	; 58
 e6a:	0c f0       	brlt	.+2      	; 0xe6e <itoa+0x2c>
 e6c:	89 5d       	subi	r24, 0xD9	; 217
 e6e:	81 93       	st	Z+, r24
 e70:	cb 01       	movw	r24, r22
 e72:	00 97       	sbiw	r24, 0x00	; 0
 e74:	a1 f7       	brne	.-24     	; 0xe5e <itoa+0x1c>
 e76:	16 f4       	brtc	.+4      	; 0xe7c <itoa+0x3a>
 e78:	5d e2       	ldi	r21, 0x2D	; 45
 e7a:	51 93       	st	Z+, r21
 e7c:	10 82       	st	Z, r1
 e7e:	c9 01       	movw	r24, r18
 e80:	0c 94 42 07 	jmp	0xe84	; 0xe84 <strrev>

00000e84 <strrev>:
 e84:	dc 01       	movw	r26, r24
 e86:	fc 01       	movw	r30, r24
 e88:	67 2f       	mov	r22, r23
 e8a:	71 91       	ld	r23, Z+
 e8c:	77 23       	and	r23, r23
 e8e:	e1 f7       	brne	.-8      	; 0xe88 <strrev+0x4>
 e90:	32 97       	sbiw	r30, 0x02	; 2
 e92:	04 c0       	rjmp	.+8      	; 0xe9c <strrev+0x18>
 e94:	7c 91       	ld	r23, X
 e96:	6d 93       	st	X+, r22
 e98:	70 83       	st	Z, r23
 e9a:	62 91       	ld	r22, -Z
 e9c:	ae 17       	cp	r26, r30
 e9e:	bf 07       	cpc	r27, r31
 ea0:	c8 f3       	brcs	.-14     	; 0xe94 <strrev+0x10>
 ea2:	08 95       	ret

00000ea4 <_exit>:
 ea4:	f8 94       	cli

00000ea6 <__stop_program>:
 ea6:	ff cf       	rjmp	.-2      	; 0xea6 <__stop_program>
