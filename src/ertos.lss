
ertos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00000e2c  00000ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001c4  008001c4  00001024  2**0
                  ALLOC
  3 .stab         00001f20  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cf  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__ctors_end>
   4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  10:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  14:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  18:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  1c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  20:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  24:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  2c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_11>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  3c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  40:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  44:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  48:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  4c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  50:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>

00000054 <__c.1604>:
  54:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000005f <__c.1602>:
  5f:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000006a <__c.1600>:
  6a:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

00000075 <__c.1598>:
  75:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

00000080 <__c.1596>:
  80:	74 69 6d 65 74 65 73 74 2e 63 00                    timetest.c.

0000008b <__c.1388>:
  8b:	2d 2d 2d 3d 3d 3d 23 23 23 20 54 65 73 74 73 75     ---===### Testsu
  9b:	69 74 65 20 23 23 23 3d 3d 3d 2d 2d 2d 0a 00        ite ###===---..

000000aa <__c.1399>:
  aa:	0a 2d 2d 2d 2d 2d 20 46 69 6e 69 73 68 65 64 20     .----- Finished 
  ba:	54 65 73 74 73 75 69 74 65 20 2d 2d 2d 2d 0a 00     Testsuite ----..

000000ca <__c.1397>:
  ca:	20 72 75 6e 73 20 6f 66 20 00                        runs of .

000000d4 <__c.1395>:
  d4:	0a 45 78 70 65 63 74 65 64 20 00                    .Expected .

000000df <__c.1393>:
  df:	2d 2d 2d 3d 3d 3d 23 23 23 23 20 52 45 53 55 4c     ---===#### RESUL
  ef:	54 53 20 23 23 23 23 3d 3d 3d 2d 2d 2d 0a 45 72     TS ####===---.Er
  ff:	72 6f 72 73 3d 00                                   rors=.

00000105 <__c.1422>:
 105:	46 61 69 6c 75 72 65 0a 00                          Failure..

0000010e <__c.1420>:
 10e:	4f 4b 0a 00                                         OK..

00000112 <__c.1418>:
 112:	2e 2e 2e 20 00                                      ... .

00000117 <__c.1416>:
 117:	43 68 65 63 6b 69 6e 67 20 54 72 61 63 65 70 6f     Checking Tracepo
 127:	69 6e 74 20 00                                      int .

0000012c <__c.1475>:
 12c:	20 45 52 52 4f 52 53 0a 00                           ERRORS..

00000135 <__c.1473>:
 135:	54 65 73 74 73 20 61 62 6f 72 74 65 64 20 62 65     Tests aborted be
 145:	63 61 75 73 65 20 6f 66 20 00                       cause of .

0000014f <__c.1471>:
 14f:	46 61 69 6c 75 72 65 0a 00                          Failure..

00000158 <__c.1469>:
 158:	4f 4b 0a 00                                         OK..

0000015c <__c.1467>:
 15c:	29 2e 2e 2e 20 00                                   )... .

00000162 <__c.1465>:
 162:	2c 00                                               ,.

00000164 <__c.1463>:
 164:	20 61 73 73 65 72 74 47 72 65 61 74 65 72 28 00      assertGreater(.

00000174 <__c.1460>:
 174:	20 61 73 73 65 72 74 47 72 65 61 74 65 72 45 71      assertGreaterEq
 184:	75 61 6c 28 00                                      ual(.

00000189 <__c.1457>:
 189:	20 61 73 73 65 72 74 45 71 75 61 6c 73 28 00         assertEquals(.

00000198 <__c.1454>:
 198:	20 61 73 73 65 72 74 4c 6f 77 65 72 45 71 75 61      assertLowerEqua
 1a8:	6c 28 00                                            l(.

000001ab <__c.1450>:
 1ab:	20 61 73 73 65 72 74 4c 6f 77 65 72 28 00            assertLower(.

000001b9 <__c.1447>:
 1b9:	20 2a 20 00 00                                       * ..

000001be <__ctors_end>:
 1be:	11 24       	eor	r1, r1
 1c0:	1f be       	out	0x3f, r1	; 63
 1c2:	cf e5       	ldi	r28, 0x5F	; 95
 1c4:	d8 e0       	ldi	r29, 0x08	; 8
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	cd bf       	out	0x3d, r28	; 61

000001ca <__do_copy_data>:
 1ca:	11 e0       	ldi	r17, 0x01	; 1
 1cc:	a0 e6       	ldi	r26, 0x60	; 96
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ec e2       	ldi	r30, 0x2C	; 44
 1d2:	fe e0       	ldi	r31, 0x0E	; 14
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <.do_copy_data_start>

000001d6 <.do_copy_data_loop>:
 1d6:	05 90       	lpm	r0, Z+
 1d8:	0d 92       	st	X+, r0

000001da <.do_copy_data_start>:
 1da:	a4 3c       	cpi	r26, 0xC4	; 196
 1dc:	b1 07       	cpc	r27, r17
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <.do_copy_data_loop>

000001e0 <__do_clear_bss>:
 1e0:	11 e0       	ldi	r17, 0x01	; 1
 1e2:	a4 ec       	ldi	r26, 0xC4	; 196
 1e4:	b1 e0       	ldi	r27, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
 1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
 1ea:	aa 3d       	cpi	r26, 0xDA	; 218
 1ec:	b1 07       	cpc	r27, r17
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>
 1f0:	0e 94 92 01 	call	0x324	; 0x324 <main>
 1f4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_exit>

000001f8 <__bad_interrupt>:
 1f8:	0c 94 00 00 	jmp	0x0	; 0x0 <__vectors>

000001fc <setup>:
#define TASKEPIN PB4



void setup(void)
{
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
  sbi(DEFAULTDDR, TASKAPIN);
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKBPIN);
 212:	a7 e3       	ldi	r26, 0x37	; 55
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e7 e3       	ldi	r30, 0x37	; 55
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKCPIN);
 220:	a7 e3       	ldi	r26, 0x37	; 55
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e7 e3       	ldi	r30, 0x37	; 55
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKDPIN);
 22e:	a7 e3       	ldi	r26, 0x37	; 55
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e7 e3       	ldi	r30, 0x37	; 55
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8c 93       	st	X, r24
  sbi(DEFAULTDDR, TASKEPIN);
 23c:	a7 e3       	ldi	r26, 0x37	; 55
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e7 e3       	ldi	r30, 0x37	; 55
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8c 93       	st	X, r24
  setTracepoint(1);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 d3 01 	sts	0x01D3, r24
}
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <task_A>:

   u08 a = 0, c=0;
TASK(A,128)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62

	for(a=0;a < 100;a++)
 25e:	10 92 c4 01 	sts	0x01C4, r1
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <task_A+0x4c>
	{
      for(c=0;c<100;c++)
 264:	10 92 c5 01 	sts	0x01C5, r1
 268:	13 c0       	rjmp	.+38     	; 0x290 <task_A+0x3a>
      {
       		sbi(DEFAULTPORT, TASKAPIN);
 26a:	a8 e3       	ldi	r26, 0x38	; 56
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e8 e3       	ldi	r30, 0x38	; 56
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	8c 93       	st	X, r24
				cbi(DEFAULTPORT, TASKAPIN);
 278:	a8 e3       	ldi	r26, 0x38	; 56
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e8 e3       	ldi	r30, 0x38	; 56
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	8c 93       	st	X, r24
TASK(A,128)
{

	for(a=0;a < 100;a++)
	{
      for(c=0;c<100;c++)
 286:	80 91 c5 01 	lds	r24, 0x01C5
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 c5 01 	sts	0x01C5, r24
 290:	80 91 c5 01 	lds	r24, 0x01C5
 294:	84 36       	cpi	r24, 0x64	; 100
 296:	48 f3       	brcs	.-46     	; 0x26a <task_A+0x14>

   u08 a = 0, c=0;
TASK(A,128)
{

	for(a=0;a < 100;a++)
 298:	80 91 c4 01 	lds	r24, 0x01C4
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 c4 01 	sts	0x01C4, r24
 2a2:	80 91 c4 01 	lds	r24, 0x01C4
 2a6:	84 36       	cpi	r24, 0x64	; 100
 2a8:	e8 f2       	brcs	.-70     	; 0x264 <task_A+0xe>
       		sbi(DEFAULTPORT, TASKAPIN);
				cbi(DEFAULTPORT, TASKAPIN);
      }

  	}
  	setTracepoint(2);
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	80 93 d3 01 	sts	0x01D3, r24
  	ENDTASK(A);
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	80 93 0f 01 	sts	0x010F, r24
 2b6:	00 00       	nop
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <task_A+0x60>

000002ba <task_B>:
}

u08 b = 0;
TASK(B,128)
{
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	0f 92       	push	r0
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
   u08 i;
	for(b=0;b<2;b++)
 2c4:	10 92 c6 01 	sts	0x01C6, r1
 2c8:	21 c0       	rjmp	.+66     	; 0x30c <task_B+0x52>
	{
	   for(i=0; i < 100; i++)
 2ca:	19 82       	std	Y+1, r1	; 0x01
 2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <task_B+0x36>
	   {
			sbi(DEFAULTPORT, TASKBPIN);
 2ce:	a8 e3       	ldi	r26, 0x38	; 56
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e8 e3       	ldi	r30, 0x38	; 56
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	8c 93       	st	X, r24
			cbi(DEFAULTPORT, TASKBPIN);
 2dc:	a8 e3       	ldi	r26, 0x38	; 56
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e8 e3       	ldi	r30, 0x38	; 56
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	8c 93       	st	X, r24
TASK(B,128)
{
   u08 i;
	for(b=0;b<2;b++)
	{
	   for(i=0; i < 100; i++)
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	84 36       	cpi	r24, 0x64	; 100
 2f4:	60 f3       	brcs	.-40     	; 0x2ce <task_B+0x14>
	   {
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
 2f6:	60 e2       	ldi	r22, 0x20	; 32
 2f8:	7e e4       	ldi	r23, 0x4E	; 78
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <sleep>

u08 b = 0;
TASK(B,128)
{
   u08 i;
	for(b=0;b<2;b++)
 302:	80 91 c6 01 	lds	r24, 0x01C6
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 c6 01 	sts	0x01C6, r24
 30c:	80 91 c6 01 	lds	r24, 0x01C6
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	d8 f2       	brcs	.-74     	; 0x2ca <task_B+0x10>
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
  	}
  	setTracepoint(3);
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	80 93 d3 01 	sts	0x01D3, r24
  	ENDTASK(B);
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	80 93 bf 01 	sts	0x01BF, r24
 320:	00 00       	nop
 322:	fe cf       	rjmp	.-4      	; 0x320 <task_B+0x66>

00000324 <main>:
   checkTracepoint(0);
}
#endif

int main(void)
{
 324:	0f 93       	push	r16
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
   INIT_RTOS();
 32e:	ed e5       	ldi	r30, 0x5D	; 93
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	8f e5       	ldi	r24, 0x5F	; 95
 334:	98 e0       	ldi	r25, 0x08	; 8
 336:	91 83       	std	Z+1, r25	; 0x01
 338:	80 83       	st	Z, r24
 33a:	00 24       	eor	r0, r0
 33c:	11 24       	eor	r1, r1
 33e:	22 24       	eor	r2, r2
 340:	33 24       	eor	r3, r3
 342:	44 24       	eor	r4, r4
 344:	55 24       	eor	r5, r5
 346:	66 24       	eor	r6, r6
 348:	77 24       	eor	r7, r7
 34a:	88 24       	eor	r8, r8
 34c:	99 24       	eor	r9, r9
 34e:	aa 24       	eor	r10, r10
 350:	bb 24       	eor	r11, r11
 352:	cc 24       	eor	r12, r12
 354:	dd 24       	eor	r13, r13
 356:	ee 24       	eor	r14, r14
 358:	ff 24       	eor	r15, r15
 35a:	00 27       	eor	r16, r16
 35c:	11 27       	eor	r17, r17
 35e:	22 27       	eor	r18, r18
 360:	33 27       	eor	r19, r19
 362:	44 27       	eor	r20, r20
 364:	55 27       	eor	r21, r21
 366:	66 27       	eor	r22, r22
 368:	77 27       	eor	r23, r23
 36a:	88 27       	eor	r24, r24
 36c:	99 27       	eor	r25, r25
 36e:	aa 27       	eor	r26, r26
 370:	bb 27       	eor	r27, r27
 372:	cc 27       	eor	r28, r28
 374:	dd 27       	eor	r29, r29
 376:	ee 27       	eor	r30, r30
 378:	ff 27       	eor	r31, r31
 37a:	0e 94 c0 04 	call	0x980	; 0x980 <uart_init>
	RUN(assertionsNoFailure);
	checkTracepoint(7);
	suiteend();
#endif

   suite();
 37e:	0e 94 62 05 	call	0xac4	; 0xac4 <suite>
   assertEquals(0,a);
 382:	20 e8       	ldi	r18, 0x80	; 128
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	80 91 c4 01 	lds	r24, 0x01C4
 38a:	e8 2f       	mov	r30, r24
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	c9 01       	movw	r24, r18
 390:	6a e8       	ldi	r22, 0x8A	; 138
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	9f 01       	movw	r18, r30
 39a:	02 e0       	ldi	r16, 0x02	; 2
 39c:	0e 94 e7 05 	call	0xbce	; 0xbce <assertion>
   assertEquals(0,b);
 3a0:	25 e7       	ldi	r18, 0x75	; 117
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	80 91 c6 01 	lds	r24, 0x01C6
 3a8:	e8 2f       	mov	r30, r24
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	c9 01       	movw	r24, r18
 3ae:	6b e8       	ldi	r22, 0x8B	; 139
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	9f 01       	movw	r18, r30
 3b8:	02 e0       	ldi	r16, 0x02	; 2
 3ba:	0e 94 e7 05 	call	0xbce	; 0xbce <assertion>
	setup();
 3be:	0e 94 fe 00 	call	0x1fc	; 0x1fc <setup>
	checkTracepoint(1);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <checkTracepoint>

   startRRScheduler(taskset, TASK_AMOUNT);
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	62 e0       	ldi	r22, 0x02	; 2
 3ce:	0e 94 4e 03 	call	0x69c	; 0x69c <startRRScheduler>
	assertEquals(a, 100);
 3d2:	2a e6       	ldi	r18, 0x6A	; 106
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	80 91 c4 01 	lds	r24, 0x01C4
 3da:	48 2f       	mov	r20, r24
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	60 e9       	ldi	r22, 0x90	; 144
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	24 e6       	ldi	r18, 0x64	; 100
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 e0       	ldi	r16, 0x02	; 2
 3ea:	0e 94 e7 05 	call	0xbce	; 0xbce <assertion>
   assertEquals(b,2);
 3ee:	2f e5       	ldi	r18, 0x5F	; 95
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	80 91 c6 01 	lds	r24, 0x01C6
 3f6:	48 2f       	mov	r20, r24
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	c9 01       	movw	r24, r18
 3fc:	61 e9       	ldi	r22, 0x91	; 145
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	22 e0       	ldi	r18, 0x02	; 2
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	02 e0       	ldi	r16, 0x02	; 2
 406:	0e 94 e7 05 	call	0xbce	; 0xbce <assertion>
   assertEquals(c,100);
 40a:	24 e5       	ldi	r18, 0x54	; 84
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	80 91 c5 01 	lds	r24, 0x01C5
 412:	48 2f       	mov	r20, r24
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	c9 01       	movw	r24, r18
 418:	62 e9       	ldi	r22, 0x92	; 146
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	24 e6       	ldi	r18, 0x64	; 100
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	02 e0       	ldi	r16, 0x02	; 2
 422:	0e 94 e7 05 	call	0xbce	; 0xbce <assertion>
   checkTracepoint(3);
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 ae 05 	call	0xb5c	; 0xb5c <checkTracepoint>
	suiteend();	
 42c:	0e 94 77 05 	call	0xaee	; 0xaee <suiteend>
	
	do{
	  nop();
 430:	00 00       	nop
 432:	fe cf       	rjmp	.-4      	; 0x430 <main+0x10c>

00000434 <initTask>:

SCHEDULER currentScheduler;


void initTask(TASK *task)
{
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	00 d0       	rcall	.+0      	; 0x43a <initTask+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <initTask+0x8>
 43c:	0f 92       	push	r0
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	9d 83       	std	Y+5, r25	; 0x05
 444:	8c 83       	std	Y+4, r24	; 0x04
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
 446:	ec 81       	ldd	r30, Y+4	; 0x04
 448:	fd 81       	ldd	r31, Y+5	; 0x05
 44a:	85 85       	ldd	r24, Z+13	; 0x0d
 44c:	88 23       	and	r24, r24
 44e:	09 f0       	breq	.+2      	; 0x452 <initTask+0x1e>
 450:	4a c0       	rjmp	.+148    	; 0x4e6 <initTask+0xb2>
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
 452:	1b 82       	std	Y+3, r1	; 0x03
 454:	0e c0       	rjmp	.+28     	; 0x472 <initTask+0x3e>
       {
          task->stack[i] = 0;
 456:	ec 81       	ldd	r30, Y+4	; 0x04
 458:	fd 81       	ldd	r31, Y+5	; 0x05
 45a:	24 81       	ldd	r18, Z+4	; 0x04
 45c:	35 81       	ldd	r19, Z+5	; 0x05
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	88 2f       	mov	r24, r24
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	10 82       	st	Z, r1
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	8b 83       	std	Y+3, r24	; 0x03
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	ec 81       	ldd	r30, Y+4	; 0x04
 47a:	fd 81       	ldd	r31, Y+5	; 0x05
 47c:	80 85       	ldd	r24, Z+8	; 0x08
 47e:	88 2f       	mov	r24, r24
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 97       	sbiw	r24, 0x02	; 2
 484:	28 17       	cp	r18, r24
 486:	39 07       	cpc	r19, r25
 488:	34 f3       	brlt	.-52     	; 0x456 <initTask+0x22>
       {
          task->stack[i] = 0;
       }
       pc_high = (task->programmCounter >> 8);
 48a:	ec 81       	ldd	r30, Y+4	; 0x04
 48c:	fd 81       	ldd	r31, Y+5	; 0x05
 48e:	82 81       	ldd	r24, Z+2	; 0x02
 490:	93 81       	ldd	r25, Z+3	; 0x03
 492:	89 2f       	mov	r24, r25
 494:	99 27       	eor	r25, r25
 496:	8a 83       	std	Y+2, r24	; 0x02
       pc_low =  0xff & task->programmCounter;
 498:	ec 81       	ldd	r30, Y+4	; 0x04
 49a:	fd 81       	ldd	r31, Y+5	; 0x05
 49c:	82 81       	ldd	r24, Z+2	; 0x02
 49e:	93 81       	ldd	r25, Z+3	; 0x03
 4a0:	89 83       	std	Y+1, r24	; 0x01
       i++;
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	8b 83       	std	Y+3, r24	; 0x03
       task->stack[i] = pc_high;
 4a8:	ec 81       	ldd	r30, Y+4	; 0x04
 4aa:	fd 81       	ldd	r31, Y+5	; 0x05
 4ac:	24 81       	ldd	r18, Z+4	; 0x04
 4ae:	35 81       	ldd	r19, Z+5	; 0x05
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	e8 0f       	add	r30, r24
 4ba:	f9 1f       	adc	r31, r25
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	80 83       	st	Z, r24
       i++;
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	8b 83       	std	Y+3, r24	; 0x03
       task->stack[i] = pc_low;
 4c6:	ec 81       	ldd	r30, Y+4	; 0x04
 4c8:	fd 81       	ldd	r31, Y+5	; 0x05
 4ca:	24 81       	ldd	r18, Z+4	; 0x04
 4cc:	35 81       	ldd	r19, Z+5	; 0x05
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	e8 0f       	add	r30, r24
 4d8:	f9 1f       	adc	r31, r25
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	80 83       	st	Z, r24
		 // Set Task Ready
		 task->taskState = TASK_RUNNING;		
 4de:	ec 81       	ldd	r30, Y+4	; 0x04
 4e0:	fd 81       	ldd	r31, Y+5	; 0x05
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	85 87       	std	Z+13, r24	; 0x0d
	}
}
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <sleep>:

void sleep(u32 pause_us)
{
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	27 97       	sbiw	r28, 0x07	; 7
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	6c 83       	std	Y+4, r22	; 0x04
 50c:	7d 83       	std	Y+5, r23	; 0x05
 50e:	8e 83       	std	Y+6, r24	; 0x06
 510:	9f 83       	std	Y+7, r25	; 0x07
	TASK *task;
	BOOL pause = 0;
 512:	19 82       	std	Y+1, r1	; 0x01
	task = currentScheduler.tasks[currentScheduler.current_task];
 514:	20 91 d4 01 	lds	r18, 0x01D4
 518:	30 91 d5 01 	lds	r19, 0x01D5
 51c:	80 91 d6 01 	lds	r24, 0x01D6
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	f9 01       	movw	r30, r18
 52a:	e8 0f       	add	r30, r24
 52c:	f9 1f       	adc	r31, r25
 52e:	80 81       	ld	r24, Z
 530:	91 81       	ldd	r25, Z+1	; 0x01
 532:	9b 83       	std	Y+3, r25	; 0x03
 534:	8a 83       	std	Y+2, r24	; 0x02
	//if(task->taskState == TASK_RUNNING)
	//{
	  // cli();
		task->pause_us = pause_us;
 536:	ea 81       	ldd	r30, Y+2	; 0x02
 538:	fb 81       	ldd	r31, Y+3	; 0x03
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	9d 81       	ldd	r25, Y+5	; 0x05
 53e:	ae 81       	ldd	r26, Y+6	; 0x06
 540:	bf 81       	ldd	r27, Y+7	; 0x07
 542:	81 87       	std	Z+9, r24	; 0x09
 544:	92 87       	std	Z+10, r25	; 0x0a
 546:	a3 87       	std	Z+11, r26	; 0x0b
 548:	b4 87       	std	Z+12, r27	; 0x0c
		task->taskState = TASK_PAUSE;
 54a:	ea 81       	ldd	r30, Y+2	; 0x02
 54c:	fb 81       	ldd	r31, Y+3	; 0x03
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	85 87       	std	Z+13, r24	; 0x0d
	//	sei();
		
		do
		{
			pause = (currentScheduler.tasks[currentScheduler.current_task]->taskState == TASK_PAUSE);
 552:	20 91 d4 01 	lds	r18, 0x01D4
 556:	30 91 d5 01 	lds	r19, 0x01D5
 55a:	80 91 d6 01 	lds	r24, 0x01D6
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	f9 01       	movw	r30, r18
 568:	e8 0f       	add	r30, r24
 56a:	f9 1f       	adc	r31, r25
 56c:	01 90       	ld	r0, Z+
 56e:	f0 81       	ld	r31, Z
 570:	e0 2d       	mov	r30, r0
 572:	85 85       	ldd	r24, Z+13	; 0x0d
 574:	19 82       	std	Y+1, r1	; 0x01
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	11 f4       	brne	.+4      	; 0x57e <sleep+0x88>
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	89 83       	std	Y+1, r24	; 0x01
		} while(pause);
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	88 23       	and	r24, r24
 582:	39 f7       	brne	.-50     	; 0x552 <sleep+0x5c>
	//}
}
 584:	27 96       	adiw	r28, 0x07	; 7
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	cf 91       	pop	r28
 592:	df 91       	pop	r29
 594:	08 95       	ret

00000596 <decrementPause>:

void decrementPause(void)
{
 596:	df 93       	push	r29
 598:	cf 93       	push	r28
 59a:	00 d0       	rcall	.+0      	; 0x59c <decrementPause+0x6>
 59c:	0f 92       	push	r0
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 5a2:	1b 82       	std	Y+3, r1	; 0x03
 5a4:	3e c0       	rjmp	.+124    	; 0x622 <decrementPause+0x8c>
	{
		task = currentScheduler.tasks[i];
 5a6:	20 91 d4 01 	lds	r18, 0x01D4
 5aa:	30 91 d5 01 	lds	r19, 0x01D5
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	88 2f       	mov	r24, r24
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	f9 01       	movw	r30, r18
 5ba:	e8 0f       	add	r30, r24
 5bc:	f9 1f       	adc	r31, r25
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	9a 83       	std	Y+2, r25	; 0x02
 5c4:	89 83       	std	Y+1, r24	; 0x01
		if(task->taskState == TASK_PAUSE)
 5c6:	e9 81       	ldd	r30, Y+1	; 0x01
 5c8:	fa 81       	ldd	r31, Y+2	; 0x02
 5ca:	85 85       	ldd	r24, Z+13	; 0x0d
 5cc:	82 30       	cpi	r24, 0x02	; 2
 5ce:	31 f5       	brne	.+76     	; 0x61c <decrementPause+0x86>
		{
      	if(task->pause_us <= TIMER_DELAY_US)
 5d0:	e9 81       	ldd	r30, Y+1	; 0x01
 5d2:	fa 81       	ldd	r31, Y+2	; 0x02
 5d4:	81 85       	ldd	r24, Z+9	; 0x09
 5d6:	92 85       	ldd	r25, Z+10	; 0x0a
 5d8:	a3 85       	ldd	r26, Z+11	; 0x0b
 5da:	b4 85       	ldd	r27, Z+12	; 0x0c
 5dc:	8b 3f       	cpi	r24, 0xFB	; 251
 5de:	91 05       	cpc	r25, r1
 5e0:	a1 05       	cpc	r26, r1
 5e2:	b1 05       	cpc	r27, r1
 5e4:	58 f4       	brcc	.+22     	; 0x5fc <decrementPause+0x66>
      	{
      		task->pause_us = 0;
 5e6:	e9 81       	ldd	r30, Y+1	; 0x01
 5e8:	fa 81       	ldd	r31, Y+2	; 0x02
 5ea:	11 86       	std	Z+9, r1	; 0x09
 5ec:	12 86       	std	Z+10, r1	; 0x0a
 5ee:	13 86       	std	Z+11, r1	; 0x0b
 5f0:	14 86       	std	Z+12, r1	; 0x0c
      		task->taskState = TASK_RUNNING;
 5f2:	e9 81       	ldd	r30, Y+1	; 0x01
 5f4:	fa 81       	ldd	r31, Y+2	; 0x02
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	85 87       	std	Z+13, r24	; 0x0d
 5fa:	10 c0       	rjmp	.+32     	; 0x61c <decrementPause+0x86>
      	}
      	else
      	{
      		task->pause_us -= TIMER_DELAY_US;
 5fc:	e9 81       	ldd	r30, Y+1	; 0x01
 5fe:	fa 81       	ldd	r31, Y+2	; 0x02
 600:	81 85       	ldd	r24, Z+9	; 0x09
 602:	92 85       	ldd	r25, Z+10	; 0x0a
 604:	a3 85       	ldd	r26, Z+11	; 0x0b
 606:	b4 85       	ldd	r27, Z+12	; 0x0c
 608:	8a 5f       	subi	r24, 0xFA	; 250
 60a:	90 40       	sbci	r25, 0x00	; 0
 60c:	a0 40       	sbci	r26, 0x00	; 0
 60e:	b0 40       	sbci	r27, 0x00	; 0
 610:	e9 81       	ldd	r30, Y+1	; 0x01
 612:	fa 81       	ldd	r31, Y+2	; 0x02
 614:	81 87       	std	Z+9, r24	; 0x09
 616:	92 87       	std	Z+10, r25	; 0x0a
 618:	a3 87       	std	Z+11, r26	; 0x0b
 61a:	b4 87       	std	Z+12, r27	; 0x0c

void decrementPause(void)
{
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	8f 5f       	subi	r24, 0xFF	; 255
 620:	8b 83       	std	Y+3, r24	; 0x03
 622:	90 91 d7 01 	lds	r25, 0x01D7
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	89 17       	cp	r24, r25
 62a:	08 f4       	brcc	.+2      	; 0x62e <decrementPause+0x98>
 62c:	bc cf       	rjmp	.-136    	; 0x5a6 <decrementPause+0x10>
      	{
      		task->pause_us -= TIMER_DELAY_US;
      	}
      }
	}
}
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	cf 91       	pop	r28
 636:	df 91       	pop	r29
 638:	08 95       	ret

0000063a <allTasksFinished>:

u08 allTasksFinished(void)
{
 63a:	df 93       	push	r29
 63c:	cf 93       	push	r28
 63e:	00 d0       	rcall	.+0      	; 0x640 <allTasksFinished+0x6>
 640:	00 d0       	rcall	.+0      	; 0x642 <allTasksFinished+0x8>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
   u08 i;
   TASK *task;
   u08 result = 1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 64a:	1c 82       	std	Y+4, r1	; 0x04
 64c:	1a c0       	rjmp	.+52     	; 0x682 <allTasksFinished+0x48>
	{
		task = currentScheduler.tasks[i];
 64e:	20 91 d4 01 	lds	r18, 0x01D4
 652:	30 91 d5 01 	lds	r19, 0x01D5
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	f9 01       	movw	r30, r18
 662:	e8 0f       	add	r30, r24
 664:	f9 1f       	adc	r31, r25
 666:	80 81       	ld	r24, Z
 668:	91 81       	ldd	r25, Z+1	; 0x01
 66a:	9b 83       	std	Y+3, r25	; 0x03
 66c:	8a 83       	std	Y+2, r24	; 0x02
		if(task->taskState != TASK_FINISHED)
 66e:	ea 81       	ldd	r30, Y+2	; 0x02
 670:	fb 81       	ldd	r31, Y+3	; 0x03
 672:	85 85       	ldd	r24, Z+13	; 0x0d
 674:	83 30       	cpi	r24, 0x03	; 3
 676:	11 f0       	breq	.+4      	; 0x67c <allTasksFinished+0x42>
		{
			result = 0;
 678:	19 82       	std	Y+1, r1	; 0x01
 67a:	08 c0       	rjmp	.+16     	; 0x68c <allTasksFinished+0x52>
u08 allTasksFinished(void)
{
   u08 i;
   TASK *task;
   u08 result = 1;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	8c 83       	std	Y+4, r24	; 0x04
 682:	90 91 d7 01 	lds	r25, 0x01D7
 686:	8c 81       	ldd	r24, Y+4	; 0x04
 688:	89 17       	cp	r24, r25
 68a:	08 f3       	brcs	.-62     	; 0x64e <allTasksFinished+0x14>
		{
			result = 0;
			break;
		}
	}
	return (result);
 68c:	89 81       	ldd	r24, Y+1	; 0x01
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	08 95       	ret

0000069c <startRRScheduler>:

void startRRScheduler(TASK **tasks, u08 tasks_length)
{
 69c:	df 93       	push	r29
 69e:	cf 93       	push	r28
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <startRRScheduler+0x6>
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <startRRScheduler+0x8>
 6a4:	0f 92       	push	r0
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	9c 83       	std	Y+4, r25	; 0x04
 6ac:	8b 83       	std	Y+3, r24	; 0x03
 6ae:	6d 83       	std	Y+5, r22	; 0x05
	currentScheduler.stackPointer = SP + 7;
 6b0:	ed e5       	ldi	r30, 0x5D	; 93
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	07 96       	adiw	r24, 0x07	; 7
 6ba:	90 93 d9 01 	sts	0x01D9, r25
 6be:	80 93 d8 01 	sts	0x01D8, r24
   TASK *task;
	currentScheduler.current_task = 0;
 6c2:	10 92 d6 01 	sts	0x01D6, r1
	currentScheduler.tasks = tasks;
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	90 93 d5 01 	sts	0x01D5, r25
 6ce:	80 93 d4 01 	sts	0x01D4, r24
	currentScheduler.tasks_length = tasks_length;
 6d2:	8d 81       	ldd	r24, Y+5	; 0x05
 6d4:	80 93 d7 01 	sts	0x01D7, r24

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
 6d8:	10 92 d6 01 	sts	0x01D6, r1
 6dc:	1a c0       	rjmp	.+52     	; 0x712 <startRRScheduler+0x76>
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
 6de:	20 91 d4 01 	lds	r18, 0x01D4
 6e2:	30 91 d5 01 	lds	r19, 0x01D5
 6e6:	80 91 d6 01 	lds	r24, 0x01D6
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	f9 01       	movw	r30, r18
 6f4:	e8 0f       	add	r30, r24
 6f6:	f9 1f       	adc	r31, r25
 6f8:	80 81       	ld	r24, Z
 6fa:	91 81       	ldd	r25, Z+1	; 0x01
 6fc:	9a 83       	std	Y+2, r25	; 0x02
 6fe:	89 83       	std	Y+1, r24	; 0x01
      initTask(task);
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	0e 94 1a 02 	call	0x434	; 0x434 <initTask>
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
 708:	80 91 d6 01 	lds	r24, 0x01D6
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 d6 01 	sts	0x01D6, r24
	currentScheduler.tasks = tasks;
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
 712:	90 91 d6 01 	lds	r25, 0x01D6
 716:	80 91 d7 01 	lds	r24, 0x01D7
 71a:	98 17       	cp	r25, r24
 71c:	00 f3       	brcs	.-64     	; 0x6de <startRRScheduler+0x42>
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
      initTask(task);
	}
	currentScheduler.current_task = 0;
 71e:	10 92 d6 01 	sts	0x01D6, r1
   task = currentScheduler.tasks[0];
 722:	e0 91 d4 01 	lds	r30, 0x01D4
 726:	f0 91 d5 01 	lds	r31, 0x01D5
 72a:	80 81       	ld	r24, Z
 72c:	91 81       	ldd	r25, Z+1	; 0x01
 72e:	9a 83       	std	Y+2, r25	; 0x02
 730:	89 83       	std	Y+1, r24	; 0x01
	initTimer();
 732:	e3 e5       	ldi	r30, 0x53	; 83
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	80 83       	st	Z, r24
 73a:	e9 e5       	ldi	r30, 0x59	; 89
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 83       	st	Z, r24
 742:	78 94       	sei

	set_stackpointer(task->stackPointer + WORKING_REGISTERS);
 744:	ad e5       	ldi	r26, 0x5D	; 93
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e9 81       	ldd	r30, Y+1	; 0x01
 74a:	fa 81       	ldd	r31, Y+2	; 0x02
 74c:	86 81       	ldd	r24, Z+6	; 0x06
 74e:	97 81       	ldd	r25, Z+7	; 0x07
 750:	80 96       	adiw	r24, 0x20	; 32
 752:	11 96       	adiw	r26, 0x01	; 1
 754:	9c 93       	st	X, r25
 756:	8e 93       	st	-X, r24
	task->taskFunction();
 758:	e9 81       	ldd	r30, Y+1	; 0x01
 75a:	fa 81       	ldd	r31, Y+2	; 0x02
 75c:	01 90       	ld	r0, Z+
 75e:	f0 81       	ld	r31, Z
 760:	e0 2d       	mov	r30, r0
 762:	09 95       	icall
}
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	cf 91       	pop	r28
 770:	df 91       	pop	r29
 772:	08 95       	ret

00000774 <nextScheduleItem>:

void nextScheduleItem(void)
{
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
	if (currentScheduler.current_task < (currentScheduler.tasks_length -1))
 77c:	80 91 d6 01 	lds	r24, 0x01D6
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	80 91 d7 01 	lds	r24, 0x01D7
 788:	88 2f       	mov	r24, r24
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	28 17       	cp	r18, r24
 790:	39 07       	cpc	r19, r25
 792:	34 f4       	brge	.+12     	; 0x7a0 <nextScheduleItem+0x2c>
	{
		currentScheduler.current_task++;
 794:	80 91 d6 01 	lds	r24, 0x01D6
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	80 93 d6 01 	sts	0x01D6, r24
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <nextScheduleItem+0x30>
	}
	else
	{
		currentScheduler.current_task = 0;
 7a0:	10 92 d6 01 	sts	0x01D6, r1
	}
}
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <incrementTime>:

void incrementTime(void)
{
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
   if((currentTime.us+TIMER_DELAY_US)==1000)
 7b2:	80 91 cc 01 	lds	r24, 0x01CC
 7b6:	90 91 cd 01 	lds	r25, 0x01CD
 7ba:	22 e0       	ldi	r18, 0x02	; 2
 7bc:	8e 3e       	cpi	r24, 0xEE	; 238
 7be:	92 07       	cpc	r25, r18
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <incrementTime+0x1a>
 7c2:	42 c0       	rjmp	.+132    	; 0x848 <incrementTime+0x9e>
   {
   	if((currentTime.ms+1)==1000)
 7c4:	80 91 ca 01 	lds	r24, 0x01CA
 7c8:	90 91 cb 01 	lds	r25, 0x01CB
 7cc:	23 e0       	ldi	r18, 0x03	; 3
 7ce:	87 3e       	cpi	r24, 0xE7	; 231
 7d0:	92 07       	cpc	r25, r18
 7d2:	61 f5       	brne	.+88     	; 0x82c <incrementTime+0x82>
   	{
   	   if((currentTime.seconds+1)==60)
 7d4:	80 91 c9 01 	lds	r24, 0x01C9
 7d8:	8b 33       	cpi	r24, 0x3B	; 59
 7da:	e1 f4       	brne	.+56     	; 0x814 <incrementTime+0x6a>
   	   {
   	   	if((currentTime.minutes+1)==60)
 7dc:	80 91 c8 01 	lds	r24, 0x01C8
 7e0:	8b 33       	cpi	r24, 0x3B	; 59
 7e2:	61 f4       	brne	.+24     	; 0x7fc <incrementTime+0x52>
   	   	{
   	   		currentTime.hours = (currentTime.hours+1) % 24;
 7e4:	80 91 c7 01 	lds	r24, 0x01C7
 7e8:	88 2f       	mov	r24, r24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	28 e1       	ldi	r18, 0x18	; 24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	b9 01       	movw	r22, r18
 7f4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divmodhi4>
 7f8:	80 93 c7 01 	sts	0x01C7, r24
   	   	}
   	   	currentTime.minutes = (currentTime.minutes+1) % 60;
 7fc:	80 91 c8 01 	lds	r24, 0x01C8
 800:	88 2f       	mov	r24, r24
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	2c e3       	ldi	r18, 0x3C	; 60
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	b9 01       	movw	r22, r18
 80c:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divmodhi4>
 810:	80 93 c8 01 	sts	0x01C8, r24
   	   }
   	   currentTime.seconds = (currentTime.seconds+1) % 60;
 814:	80 91 c9 01 	lds	r24, 0x01C9
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	2c e3       	ldi	r18, 0x3C	; 60
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	b9 01       	movw	r22, r18
 824:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divmodhi4>
 828:	80 93 c9 01 	sts	0x01C9, r24
   	}
   	currentTime.ms = (currentTime.ms+1) % 1000;
 82c:	80 91 ca 01 	lds	r24, 0x01CA
 830:	90 91 cb 01 	lds	r25, 0x01CB
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	28 ee       	ldi	r18, 0xE8	; 232
 838:	33 e0       	ldi	r19, 0x03	; 3
 83a:	b9 01       	movw	r22, r18
 83c:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodhi4>
 840:	90 93 cb 01 	sts	0x01CB, r25
 844:	80 93 ca 01 	sts	0x01CA, r24
   }
   currentTime.us = (currentTime.us+TIMER_DELAY_US) % 1000;
 848:	80 91 cc 01 	lds	r24, 0x01CC
 84c:	90 91 cd 01 	lds	r25, 0x01CD
 850:	86 50       	subi	r24, 0x06	; 6
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	28 ee       	ldi	r18, 0xE8	; 232
 856:	33 e0       	ldi	r19, 0x03	; 3
 858:	b9 01       	movw	r22, r18
 85a:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodhi4>
 85e:	90 93 cd 01 	sts	0x01CD, r25
 862:	80 93 cc 01 	sts	0x01CC, r24
}
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	08 95       	ret

0000086c <__vector_11>:
{
	// Testen ob nicht alle Tasks beendet worden sind
	// falls ja:
	//if(!allTasksFinished())
	//{
   	save_registers();
 86c:	0f 92       	push	r0
 86e:	1f 92       	push	r1
 870:	2f 92       	push	r2
 872:	3f 92       	push	r3
 874:	4f 92       	push	r4
 876:	5f 92       	push	r5
 878:	6f 92       	push	r6
 87a:	7f 92       	push	r7
 87c:	8f 92       	push	r8
 87e:	9f 92       	push	r9
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	4f 93       	push	r20
 896:	5f 93       	push	r21
 898:	6f 93       	push	r22
 89a:	7f 93       	push	r23
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	af 93       	push	r26
 8a2:	bf 93       	push	r27
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
		TASK *task;
		task = currentScheduler.tasks[currentScheduler.current_task];
 8ac:	20 91 d4 01 	lds	r18, 0x01D4
 8b0:	30 91 d5 01 	lds	r19, 0x01D5
 8b4:	80 91 d6 01 	lds	r24, 0x01D6
 8b8:	88 2f       	mov	r24, r24
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	f9 01       	movw	r30, r18
 8c2:	e8 0f       	add	r30, r24
 8c4:	f9 1f       	adc	r31, r25
 8c6:	80 81       	ld	r24, Z
 8c8:	91 81       	ldd	r25, Z+1	; 0x01
 8ca:	9a 83       	std	Y+2, r25	; 0x02
 8cc:	89 83       	std	Y+1, r24	; 0x01

	// Stackpointer vom letzten task sichern
		task->stackPointer = get_stackpointer();
 8ce:	ed e5       	ldi	r30, 0x5D	; 93
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	91 81       	ldd	r25, Z+1	; 0x01
 8d6:	e9 81       	ldd	r30, Y+1	; 0x01
 8d8:	fa 81       	ldd	r31, Y+2	; 0x02
 8da:	97 83       	std	Z+7, r25	; 0x07
 8dc:	86 83       	std	Z+6, r24	; 0x06
		incrementTime();
 8de:	0e 94 d5 03 	call	0x7aa	; 0x7aa <incrementTime>
		decrementPause();
 8e2:	0e 94 cb 02 	call	0x596	; 0x596 <decrementPause>

		if(allTasksFinished())
 8e6:	0e 94 1d 03 	call	0x63a	; 0x63a <allTasksFinished>
 8ea:	88 23       	and	r24, r24
 8ec:	61 f0       	breq	.+24     	; 0x906 <__vector_11+0x9a>
		{
		 	set_stackpointer(currentScheduler.stackPointer);
 8ee:	ed e5       	ldi	r30, 0x5D	; 93
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 91 d8 01 	lds	r24, 0x01D8
 8f6:	90 91 d9 01 	lds	r25, 0x01D9
 8fa:	91 83       	std	Z+1, r25	; 0x01
 8fc:	80 83       	st	Z, r24
		 	disableTimer();
 8fe:	e9 e5       	ldi	r30, 0x59	; 89
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	10 82       	st	Z, r1
		 	return_interrupt();
 904:	18 95       	reti
		}
	
		nextScheduleItem();
 906:	0e 94 ba 03 	call	0x774	; 0x774 <nextScheduleItem>
  		task = currentScheduler.tasks[currentScheduler.current_task];
 90a:	20 91 d4 01 	lds	r18, 0x01D4
 90e:	30 91 d5 01 	lds	r19, 0x01D5
 912:	80 91 d6 01 	lds	r24, 0x01D6
 916:	88 2f       	mov	r24, r24
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	f9 01       	movw	r30, r18
 920:	e8 0f       	add	r30, r24
 922:	f9 1f       	adc	r31, r25
 924:	80 81       	ld	r24, Z
 926:	91 81       	ldd	r25, Z+1	; 0x01
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	89 83       	std	Y+1, r24	; 0x01
		set_stackpointer(task->stackPointer);
 92c:	ad e5       	ldi	r26, 0x5D	; 93
 92e:	b0 e0       	ldi	r27, 0x00	; 0
 930:	e9 81       	ldd	r30, Y+1	; 0x01
 932:	fa 81       	ldd	r31, Y+2	; 0x02
 934:	86 81       	ldd	r24, Z+6	; 0x06
 936:	97 81       	ldd	r25, Z+7	; 0x07
 938:	11 96       	adiw	r26, 0x01	; 1
 93a:	9c 93       	st	X, r25
 93c:	8e 93       	st	-X, r24
		load_registers();
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	ff 90       	pop	r15
 960:	ef 90       	pop	r14
 962:	df 90       	pop	r13
 964:	cf 90       	pop	r12
 966:	bf 90       	pop	r11
 968:	af 90       	pop	r10
 96a:	9f 90       	pop	r9
 96c:	8f 90       	pop	r8
 96e:	7f 90       	pop	r7
 970:	6f 90       	pop	r6
 972:	5f 90       	pop	r5
 974:	4f 90       	pop	r4
 976:	3f 90       	pop	r3
 978:	2f 90       	pop	r2
 97a:	1f 90       	pop	r1
 97c:	0f 90       	pop	r0
	 	// Stackpointer setzen
		set_stackpointer(currentScheduler.stackPointer);
		// Timer deaktivieren
		disableTimer();
	}  */
   return_interrupt();
 97e:	18 95       	reti

00000980 <uart_init>:


/* UART-Init Bsp. ATmega16 */

void uart_init(void)
{
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
  UBRRH = UBRR_VAL >> 8;
 988:	e0 e4       	ldi	r30, 0x40	; 64
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	10 82       	st	Z, r1
  UBRRL = UBRR_VAL & 0xFF;
 98e:	e9 e2       	ldi	r30, 0x29	; 41
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	80 83       	st	Z, r24

  UCSRB |= (1<<TXEN);  // UART TX einschalten
 996:	aa e2       	ldi	r26, 0x2A	; 42
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	ea e2       	ldi	r30, 0x2A	; 42
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	88 60       	ori	r24, 0x08	; 8
 9a2:	8c 93       	st	X, r24
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // Asynchron 8N1
 9a4:	e0 e4       	ldi	r30, 0x40	; 64
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	86 e8       	ldi	r24, 0x86	; 134
 9aa:	80 83       	st	Z, r24
}
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <uart_putc>:

/* ATmega16 */
int uart_putc(unsigned char c)
{
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	0f 92       	push	r0
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich */
 9be:	eb e2       	ldi	r30, 0x2B	; 43
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	88 2f       	mov	r24, r24
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	80 72       	andi	r24, 0x20	; 32
 9ca:	90 70       	andi	r25, 0x00	; 0
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	b9 f3       	breq	.-18     	; 0x9be <uart_putc+0xc>
    {
    }

    UDR = c;                      /* sende Zeichen */
 9d0:	ec e2       	ldi	r30, 0x2C	; 44
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	80 83       	st	Z, r24
    return 0;
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	90 e0       	ldi	r25, 0x00	; 0
}
 9dc:	0f 90       	pop	r0
 9de:	cf 91       	pop	r28
 9e0:	df 91       	pop	r29
 9e2:	08 95       	ret

000009e4 <uart_puts>:


/* puts ist unabhaengig vom Controllertyp */
void uart_puts (char *s)
{
 9e4:	df 93       	push	r29
 9e6:	cf 93       	push	r28
 9e8:	00 d0       	rcall	.+0      	; 0x9ea <uart_puts+0x6>
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	9a 83       	std	Y+2, r25	; 0x02
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	0a c0       	rjmp	.+20     	; 0xa08 <uart_puts+0x24>
    while (*s)
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        uart_putc(*s);
 9f4:	e9 81       	ldd	r30, Y+1	; 0x01
 9f6:	fa 81       	ldd	r31, Y+2	; 0x02
 9f8:	80 81       	ld	r24, Z
 9fa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <uart_putc>
        s++;
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	9a 81       	ldd	r25, Y+2	; 0x02
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	9a 83       	std	Y+2, r25	; 0x02
 a06:	89 83       	std	Y+1, r24	; 0x01


/* puts ist unabhaengig vom Controllertyp */
void uart_puts (char *s)
{
    while (*s)
 a08:	e9 81       	ldd	r30, Y+1	; 0x01
 a0a:	fa 81       	ldd	r31, Y+2	; 0x02
 a0c:	80 81       	ld	r24, Z
 a0e:	88 23       	and	r24, r24
 a10:	89 f7       	brne	.-30     	; 0x9f4 <uart_puts+0x10>
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        uart_putc(*s);
        s++;
    }
}
 a12:	0f 90       	pop	r0
 a14:	0f 90       	pop	r0
 a16:	cf 91       	pop	r28
 a18:	df 91       	pop	r29
 a1a:	08 95       	ret

00000a1c <uart_putd>:

void uart_putd(int intvalue)
{
 a1c:	df 93       	push	r29
 a1e:	cf 93       	push	r28
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	2d 97       	sbiw	r28, 0x0d	; 13
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	f8 94       	cli
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	cd bf       	out	0x3d, r28	; 61
 a30:	9d 87       	std	Y+13, r25	; 0x0d
 a32:	8c 87       	std	Y+12, r24	; 0x0c
    char strbuf[11];
    itoa(intvalue, strbuf, 10);
 a34:	8c 85       	ldd	r24, Y+12	; 0x0c
 a36:	9d 85       	ldd	r25, Y+13	; 0x0d
 a38:	9e 01       	movw	r18, r28
 a3a:	2f 5f       	subi	r18, 0xFF	; 255
 a3c:	3f 4f       	sbci	r19, 0xFF	; 255
 a3e:	b9 01       	movw	r22, r18
 a40:	4a e0       	ldi	r20, 0x0A	; 10
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <itoa>
    uart_puts(strbuf);
 a48:	ce 01       	movw	r24, r28
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <uart_puts>
}
 a50:	2d 96       	adiw	r28, 0x0d	; 13
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	f8 94       	cli
 a56:	de bf       	out	0x3e, r29	; 62
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	cd bf       	out	0x3d, r28	; 61
 a5c:	cf 91       	pop	r28
 a5e:	df 91       	pop	r29
 a60:	08 95       	ret

00000a62 <uart_puts_p>:

void uart_puts_p(const char *str){
 a62:	df 93       	push	r29
 a64:	cf 93       	push	r28
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
 a6a:	28 97       	sbiw	r28, 0x08	; 8
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	98 87       	std	Y+8, r25	; 0x08
 a78:	8f 83       	std	Y+7, r24	; 0x07
 a7a:	10 c0       	rjmp	.+32     	; 0xa9c <uart_puts_p+0x3a>
	while(pgm_read_byte(str) != '\0'){
		uart_putc(pgm_read_byte(str++));
 a7c:	8f 81       	ldd	r24, Y+7	; 0x07
 a7e:	98 85       	ldd	r25, Y+8	; 0x08
 a80:	9e 83       	std	Y+6, r25	; 0x06
 a82:	8d 83       	std	Y+5, r24	; 0x05
 a84:	8f 81       	ldd	r24, Y+7	; 0x07
 a86:	98 85       	ldd	r25, Y+8	; 0x08
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	98 87       	std	Y+8, r25	; 0x08
 a8c:	8f 83       	std	Y+7, r24	; 0x07
 a8e:	ed 81       	ldd	r30, Y+5	; 0x05
 a90:	fe 81       	ldd	r31, Y+6	; 0x06
 a92:	84 91       	lpm	r24, Z+
 a94:	8c 83       	std	Y+4, r24	; 0x04
 a96:	8c 81       	ldd	r24, Y+4	; 0x04
 a98:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <uart_putc>
    itoa(intvalue, strbuf, 10);
    uart_puts(strbuf);
}

void uart_puts_p(const char *str){
	while(pgm_read_byte(str) != '\0'){
 a9c:	8f 81       	ldd	r24, Y+7	; 0x07
 a9e:	98 85       	ldd	r25, Y+8	; 0x08
 aa0:	9b 83       	std	Y+3, r25	; 0x03
 aa2:	8a 83       	std	Y+2, r24	; 0x02
 aa4:	ea 81       	ldd	r30, Y+2	; 0x02
 aa6:	fb 81       	ldd	r31, Y+3	; 0x03
 aa8:	84 91       	lpm	r24, Z+
 aaa:	89 83       	std	Y+1, r24	; 0x01
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	88 23       	and	r24, r24
 ab0:	29 f7       	brne	.-54     	; 0xa7c <uart_puts_p+0x1a>
		uart_putc(pgm_read_byte(str++));
	}
}
 ab2:	28 96       	adiw	r28, 0x08	; 8
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	de bf       	out	0x3e, r29	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	cd bf       	out	0x3d, r28	; 61
 abe:	cf 91       	pop	r28
 ac0:	df 91       	pop	r29
 ac2:	08 95       	ret

00000ac4 <suite>:
u08 gruns = 0;
u08 tracepoint = 0;


void suite(void)
{
 ac4:	df 93       	push	r29
 ac6:	cf 93       	push	r28
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
		  errors = 0;
 acc:	10 92 ce 01 	sts	0x01CE, r1
		  gerrors = 0;
 ad0:	10 92 d1 01 	sts	0x01D1, r1
		  runs = 0;
 ad4:	10 92 cf 01 	sts	0x01CF, r1
		  gruns = 0;
 ad8:	10 92 d2 01 	sts	0x01D2, r1
		  expected_runs = 0;
 adc:	10 92 d0 01 	sts	0x01D0, r1
		  uart_puts_p(PSTR("---===### Testsuite ###===---\n"));
 ae0:	8b e8       	ldi	r24, 0x8B	; 139
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
}
 ae8:	cf 91       	pop	r28
 aea:	df 91       	pop	r29
 aec:	08 95       	ret

00000aee <suiteend>:

void suiteend(void)
{
 aee:	df 93       	push	r29
 af0:	cf 93       	push	r28
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
		  gerrors += errors;
 af6:	90 91 d1 01 	lds	r25, 0x01D1
 afa:	80 91 ce 01 	lds	r24, 0x01CE
 afe:	89 0f       	add	r24, r25
 b00:	80 93 d1 01 	sts	0x01D1, r24
		  gruns += runs;
 b04:	90 91 d2 01 	lds	r25, 0x01D2
 b08:	80 91 cf 01 	lds	r24, 0x01CF
 b0c:	89 0f       	add	r24, r25
 b0e:	80 93 d2 01 	sts	0x01D2, r24
		  uart_puts_p(PSTR("---===#### RESULTS ####===---\nErrors="));
 b12:	8f ed       	ldi	r24, 0xDF	; 223
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		  uart_putd(gerrors);
 b1a:	80 91 d1 01 	lds	r24, 0x01D1
 b1e:	88 2f       	mov	r24, r24
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
		  uart_puts_p(PSTR("\nExpected "));
 b26:	84 ed       	ldi	r24, 0xD4	; 212
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		  uart_putd(expected_runs);
 b2e:	80 91 d0 01 	lds	r24, 0x01D0
 b32:	88 2f       	mov	r24, r24
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
		  uart_puts_p(PSTR(" runs of "));
 b3a:	8a ec       	ldi	r24, 0xCA	; 202
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		  uart_putd(gruns);
 b42:	80 91 d2 01 	lds	r24, 0x01D2
 b46:	88 2f       	mov	r24, r24
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
		  uart_puts_p(PSTR("\n----- Finished Testsuite ----\n"));
 b4e:	8a ea       	ldi	r24, 0xAA	; 170
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
}
 b56:	cf 91       	pop	r28
 b58:	df 91       	pop	r29
 b5a:	08 95       	ret

00000b5c <checkTracepoint>:

void checkTracepoint(u08 ptracepoint)
{
 b5c:	df 93       	push	r29
 b5e:	cf 93       	push	r28
 b60:	0f 92       	push	r0
 b62:	cd b7       	in	r28, 0x3d	; 61
 b64:	de b7       	in	r29, 0x3e	; 62
 b66:	89 83       	std	Y+1, r24	; 0x01
	expected_runs++;
 b68:	80 91 d0 01 	lds	r24, 0x01D0
 b6c:	8f 5f       	subi	r24, 0xFF	; 255
 b6e:	80 93 d0 01 	sts	0x01D0, r24
	if(errors==0)
 b72:	80 91 ce 01 	lds	r24, 0x01CE
 b76:	88 23       	and	r24, r24
 b78:	31 f5       	brne	.+76     	; 0xbc6 <checkTracepoint+0x6a>
	{
		runs++;
 b7a:	80 91 cf 01 	lds	r24, 0x01CF
 b7e:	8f 5f       	subi	r24, 0xFF	; 255
 b80:	80 93 cf 01 	sts	0x01CF, r24
  		uart_puts_p(PSTR("Checking Tracepoint "));
 b84:	87 e1       	ldi	r24, 0x17	; 23
 b86:	91 e0       	ldi	r25, 0x01	; 1
 b88:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
   	uart_putd(tracepoint);
 b8c:	80 91 d3 01 	lds	r24, 0x01D3
 b90:	88 2f       	mov	r24, r24
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
   	uart_puts_p(PSTR("... "));	
 b98:	82 e1       	ldi	r24, 0x12	; 18
 b9a:	91 e0       	ldi	r25, 0x01	; 1
 b9c:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		if(tracepoint==ptracepoint)
 ba0:	90 91 d3 01 	lds	r25, 0x01D3
 ba4:	89 81       	ldd	r24, Y+1	; 0x01
 ba6:	98 17       	cp	r25, r24
 ba8:	29 f4       	brne	.+10     	; 0xbb4 <checkTracepoint+0x58>
		{
			uart_puts_p(PSTR("OK\n"));
 baa:	8e e0       	ldi	r24, 0x0E	; 14
 bac:	91 e0       	ldi	r25, 0x01	; 1
 bae:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <checkTracepoint+0x6a>
		}
		else
		{
			errors++;
 bb4:	80 91 ce 01 	lds	r24, 0x01CE
 bb8:	8f 5f       	subi	r24, 0xFF	; 255
 bba:	80 93 ce 01 	sts	0x01CE, r24
			uart_puts_p(PSTR("Failure\n"));
 bbe:	85 e0       	ldi	r24, 0x05	; 5
 bc0:	91 e0       	ldi	r25, 0x01	; 1
 bc2:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		}
	}
}
 bc6:	0f 90       	pop	r0
 bc8:	cf 91       	pop	r28
 bca:	df 91       	pop	r29
 bcc:	08 95       	ret

00000bce <assertion>:

void assertion(const char *file, int line, int expected, int current, COMPARE_OPERATION compare_operator)
{
 bce:	0f 93       	push	r16
 bd0:	df 93       	push	r29
 bd2:	cf 93       	push	r28
 bd4:	cd b7       	in	r28, 0x3d	; 61
 bd6:	de b7       	in	r29, 0x3e	; 62
 bd8:	2c 97       	sbiw	r28, 0x0c	; 12
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	9b 83       	std	Y+3, r25	; 0x03
 be6:	8a 83       	std	Y+2, r24	; 0x02
 be8:	7d 83       	std	Y+5, r23	; 0x05
 bea:	6c 83       	std	Y+4, r22	; 0x04
 bec:	5f 83       	std	Y+7, r21	; 0x07
 bee:	4e 83       	std	Y+6, r20	; 0x06
 bf0:	39 87       	std	Y+9, r19	; 0x09
 bf2:	28 87       	std	Y+8, r18	; 0x08
 bf4:	0a 87       	std	Y+10, r16	; 0x0a
   BOOL result = 0;
 bf6:	19 82       	std	Y+1, r1	; 0x01
	expected_runs++;
 bf8:	80 91 d0 01 	lds	r24, 0x01D0
 bfc:	8f 5f       	subi	r24, 0xFF	; 255
 bfe:	80 93 d0 01 	sts	0x01D0, r24
	if(errors==0) {
 c02:	80 91 ce 01 	lds	r24, 0x01CE
 c06:	88 23       	and	r24, r24
 c08:	09 f0       	breq	.+2      	; 0xc0c <assertion+0x3e>
 c0a:	ac c0       	rjmp	.+344    	; 0xd64 <assertion+0x196>
		 runs++;
 c0c:	80 91 cf 01 	lds	r24, 0x01CF
 c10:	8f 5f       	subi	r24, 0xFF	; 255
 c12:	80 93 cf 01 	sts	0x01CF, r24
		 uart_puts_p(PSTR(" * "));
 c16:	89 eb       	ldi	r24, 0xB9	; 185
 c18:	91 e0       	ldi	r25, 0x01	; 1
 c1a:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		 uart_puts_p(file);
 c1e:	8a 81       	ldd	r24, Y+2	; 0x02
 c20:	9b 81       	ldd	r25, Y+3	; 0x03
 c22:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
		 uart_putc(':');
 c26:	8a e3       	ldi	r24, 0x3A	; 58
 c28:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <uart_putc>
       uart_putd(line);
 c2c:	8c 81       	ldd	r24, Y+4	; 0x04
 c2e:	9d 81       	ldd	r25, Y+5	; 0x05
 c30:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>

       switch(compare_operator) {
 c34:	8a 85       	ldd	r24, Y+10	; 0x0a
 c36:	28 2f       	mov	r18, r24
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	3c 87       	std	Y+12, r19	; 0x0c
 c3c:	2b 87       	std	Y+11, r18	; 0x0b
 c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
 c40:	9c 85       	ldd	r25, Y+12	; 0x0c
 c42:	82 30       	cpi	r24, 0x02	; 2
 c44:	91 05       	cpc	r25, r1
 c46:	b1 f1       	breq	.+108    	; 0xcb4 <assertion+0xe6>
 c48:	2b 85       	ldd	r18, Y+11	; 0x0b
 c4a:	3c 85       	ldd	r19, Y+12	; 0x0c
 c4c:	23 30       	cpi	r18, 0x03	; 3
 c4e:	31 05       	cpc	r19, r1
 c50:	54 f4       	brge	.+20     	; 0xc66 <assertion+0x98>
 c52:	8b 85       	ldd	r24, Y+11	; 0x0b
 c54:	9c 85       	ldd	r25, Y+12	; 0x0c
 c56:	00 97       	sbiw	r24, 0x00	; 0
 c58:	89 f0       	breq	.+34     	; 0xc7c <assertion+0xae>
 c5a:	2b 85       	ldd	r18, Y+11	; 0x0b
 c5c:	3c 85       	ldd	r19, Y+12	; 0x0c
 c5e:	21 30       	cpi	r18, 0x01	; 1
 c60:	31 05       	cpc	r19, r1
 c62:	d1 f0       	breq	.+52     	; 0xc98 <assertion+0xca>
 c64:	50 c0       	rjmp	.+160    	; 0xd06 <assertion+0x138>
 c66:	8b 85       	ldd	r24, Y+11	; 0x0b
 c68:	9c 85       	ldd	r25, Y+12	; 0x0c
 c6a:	83 30       	cpi	r24, 0x03	; 3
 c6c:	91 05       	cpc	r25, r1
 c6e:	81 f1       	breq	.+96     	; 0xcd0 <assertion+0x102>
 c70:	2b 85       	ldd	r18, Y+11	; 0x0b
 c72:	3c 85       	ldd	r19, Y+12	; 0x0c
 c74:	24 30       	cpi	r18, 0x04	; 4
 c76:	31 05       	cpc	r19, r1
 c78:	c9 f1       	breq	.+114    	; 0xcec <assertion+0x11e>
 c7a:	45 c0       	rjmp	.+138    	; 0xd06 <assertion+0x138>
          case LOWER_THAN:
             uart_puts_p(PSTR(" assertLower("));
 c7c:	8b ea       	ldi	r24, 0xAB	; 171
 c7e:	91 e0       	ldi	r25, 0x01	; 1
 c80:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
             if(expected<current)
 c84:	2e 81       	ldd	r18, Y+6	; 0x06
 c86:	3f 81       	ldd	r19, Y+7	; 0x07
 c88:	88 85       	ldd	r24, Y+8	; 0x08
 c8a:	99 85       	ldd	r25, Y+9	; 0x09
 c8c:	28 17       	cp	r18, r24
 c8e:	39 07       	cpc	r19, r25
 c90:	d4 f5       	brge	.+116    	; 0xd06 <assertion+0x138>
             	result = 1;
 c92:	81 e0       	ldi	r24, 0x01	; 1
 c94:	89 83       	std	Y+1, r24	; 0x01
 c96:	37 c0       	rjmp	.+110    	; 0xd06 <assertion+0x138>
             break;
          case LOWER_EQUAL_THAN:
          	 uart_puts_p(PSTR(" assertLowerEqual("));
 c98:	88 e9       	ldi	r24, 0x98	; 152
 c9a:	91 e0       	ldi	r25, 0x01	; 1
 c9c:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
             if(expected<=current)
 ca0:	2e 81       	ldd	r18, Y+6	; 0x06
 ca2:	3f 81       	ldd	r19, Y+7	; 0x07
 ca4:	88 85       	ldd	r24, Y+8	; 0x08
 ca6:	99 85       	ldd	r25, Y+9	; 0x09
 ca8:	82 17       	cp	r24, r18
 caa:	93 07       	cpc	r25, r19
 cac:	64 f1       	brlt	.+88     	; 0xd06 <assertion+0x138>
               result = 1;
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	89 83       	std	Y+1, r24	; 0x01
 cb2:	29 c0       	rjmp	.+82     	; 0xd06 <assertion+0x138>
             break;
          case EQUALS:
             uart_puts_p(PSTR(" assertEquals("));
 cb4:	89 e8       	ldi	r24, 0x89	; 137
 cb6:	91 e0       	ldi	r25, 0x01	; 1
 cb8:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
             if(expected==current)
 cbc:	2e 81       	ldd	r18, Y+6	; 0x06
 cbe:	3f 81       	ldd	r19, Y+7	; 0x07
 cc0:	88 85       	ldd	r24, Y+8	; 0x08
 cc2:	99 85       	ldd	r25, Y+9	; 0x09
 cc4:	28 17       	cp	r18, r24
 cc6:	39 07       	cpc	r19, r25
 cc8:	f1 f4       	brne	.+60     	; 0xd06 <assertion+0x138>
               result = 1;
 cca:	81 e0       	ldi	r24, 0x01	; 1
 ccc:	89 83       	std	Y+1, r24	; 0x01
 cce:	1b c0       	rjmp	.+54     	; 0xd06 <assertion+0x138>
             break;
          case GREATER_EQUAL_THAN:
          	 uart_puts_p(PSTR(" assertGreaterEqual("));
 cd0:	84 e7       	ldi	r24, 0x74	; 116
 cd2:	91 e0       	ldi	r25, 0x01	; 1
 cd4:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
             if(expected>=current)
 cd8:	2e 81       	ldd	r18, Y+6	; 0x06
 cda:	3f 81       	ldd	r19, Y+7	; 0x07
 cdc:	88 85       	ldd	r24, Y+8	; 0x08
 cde:	99 85       	ldd	r25, Y+9	; 0x09
 ce0:	28 17       	cp	r18, r24
 ce2:	39 07       	cpc	r19, r25
 ce4:	84 f0       	brlt	.+32     	; 0xd06 <assertion+0x138>
               result = 1;
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	89 83       	std	Y+1, r24	; 0x01
 cea:	0d c0       	rjmp	.+26     	; 0xd06 <assertion+0x138>
             break;
          case GREATER_THAN:
             uart_puts_p(PSTR(" assertGreater("));
 cec:	84 e6       	ldi	r24, 0x64	; 100
 cee:	91 e0       	ldi	r25, 0x01	; 1
 cf0:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
             if(expected>current)
 cf4:	2e 81       	ldd	r18, Y+6	; 0x06
 cf6:	3f 81       	ldd	r19, Y+7	; 0x07
 cf8:	88 85       	ldd	r24, Y+8	; 0x08
 cfa:	99 85       	ldd	r25, Y+9	; 0x09
 cfc:	82 17       	cp	r24, r18
 cfe:	93 07       	cpc	r25, r19
 d00:	14 f4       	brge	.+4      	; 0xd06 <assertion+0x138>
               result = 1;
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	89 83       	std	Y+1, r24	; 0x01
		 }
		
		
       uart_putd(expected);
 d06:	8e 81       	ldd	r24, Y+6	; 0x06
 d08:	9f 81       	ldd	r25, Y+7	; 0x07
 d0a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
       uart_puts_p(PSTR(","));
 d0e:	82 e6       	ldi	r24, 0x62	; 98
 d10:	91 e0       	ldi	r25, 0x01	; 1
 d12:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
       uart_putd(current);
 d16:	88 85       	ldd	r24, Y+8	; 0x08
 d18:	99 85       	ldd	r25, Y+9	; 0x09
 d1a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
       uart_puts_p(PSTR(")... "));
 d1e:	8c e5       	ldi	r24, 0x5C	; 92
 d20:	91 e0       	ldi	r25, 0x01	; 1
 d22:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
       if(result)
 d26:	89 81       	ldd	r24, Y+1	; 0x01
 d28:	88 23       	and	r24, r24
 d2a:	29 f0       	breq	.+10     	; 0xd36 <assertion+0x168>
       {
       	uart_puts_p(PSTR("OK\n"));      	
 d2c:	88 e5       	ldi	r24, 0x58	; 88
 d2e:	91 e0       	ldi	r25, 0x01	; 1
 d30:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
 d34:	17 c0       	rjmp	.+46     	; 0xd64 <assertion+0x196>
       }
       else
       {
        	   uart_puts_p(PSTR("Failure\n"));
 d36:	8f e4       	ldi	r24, 0x4F	; 79
 d38:	91 e0       	ldi	r25, 0x01	; 1
 d3a:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
           errors++;
 d3e:	80 91 ce 01 	lds	r24, 0x01CE
 d42:	8f 5f       	subi	r24, 0xFF	; 255
 d44:	80 93 ce 01 	sts	0x01CE, r24
       	    uart_puts_p(PSTR("Tests aborted because of "));
 d48:	85 e3       	ldi	r24, 0x35	; 53
 d4a:	91 e0       	ldi	r25, 0x01	; 1
 d4c:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
           uart_putd(errors);
 d50:	80 91 ce 01 	lds	r24, 0x01CE
 d54:	88 2f       	mov	r24, r24
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 0e 05 	call	0xa1c	; 0xa1c <uart_putd>
           uart_puts_p(PSTR(" ERRORS\n"));
 d5c:	8c e2       	ldi	r24, 0x2C	; 44
 d5e:	91 e0       	ldi	r25, 0x01	; 1
 d60:	0e 94 31 05 	call	0xa62	; 0xa62 <uart_puts_p>
       }
   }
}
 d64:	2c 96       	adiw	r28, 0x0c	; 12
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	f8 94       	cli
 d6a:	de bf       	out	0x3e, r29	; 62
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	cd bf       	out	0x3d, r28	; 61
 d70:	cf 91       	pop	r28
 d72:	df 91       	pop	r29
 d74:	0f 91       	pop	r16
 d76:	08 95       	ret

00000d78 <__udivmodhi4>:
 d78:	aa 1b       	sub	r26, r26
 d7a:	bb 1b       	sub	r27, r27
 d7c:	51 e1       	ldi	r21, 0x11	; 17
 d7e:	07 c0       	rjmp	.+14     	; 0xd8e <__udivmodhi4_ep>

00000d80 <__udivmodhi4_loop>:
 d80:	aa 1f       	adc	r26, r26
 d82:	bb 1f       	adc	r27, r27
 d84:	a6 17       	cp	r26, r22
 d86:	b7 07       	cpc	r27, r23
 d88:	10 f0       	brcs	.+4      	; 0xd8e <__udivmodhi4_ep>
 d8a:	a6 1b       	sub	r26, r22
 d8c:	b7 0b       	sbc	r27, r23

00000d8e <__udivmodhi4_ep>:
 d8e:	88 1f       	adc	r24, r24
 d90:	99 1f       	adc	r25, r25
 d92:	5a 95       	dec	r21
 d94:	a9 f7       	brne	.-22     	; 0xd80 <__udivmodhi4_loop>
 d96:	80 95       	com	r24
 d98:	90 95       	com	r25
 d9a:	bc 01       	movw	r22, r24
 d9c:	cd 01       	movw	r24, r26
 d9e:	08 95       	ret

00000da0 <__divmodhi4>:
 da0:	97 fb       	bst	r25, 7
 da2:	09 2e       	mov	r0, r25
 da4:	07 26       	eor	r0, r23
 da6:	0a d0       	rcall	.+20     	; 0xdbc <__divmodhi4_neg1>
 da8:	77 fd       	sbrc	r23, 7
 daa:	04 d0       	rcall	.+8      	; 0xdb4 <__divmodhi4_neg2>
 dac:	e5 df       	rcall	.-54     	; 0xd78 <__udivmodhi4>
 dae:	06 d0       	rcall	.+12     	; 0xdbc <__divmodhi4_neg1>
 db0:	00 20       	and	r0, r0
 db2:	1a f4       	brpl	.+6      	; 0xdba <__divmodhi4_exit>

00000db4 <__divmodhi4_neg2>:
 db4:	70 95       	com	r23
 db6:	61 95       	neg	r22
 db8:	7f 4f       	sbci	r23, 0xFF	; 255

00000dba <__divmodhi4_exit>:
 dba:	08 95       	ret

00000dbc <__divmodhi4_neg1>:
 dbc:	f6 f7       	brtc	.-4      	; 0xdba <__divmodhi4_exit>
 dbe:	90 95       	com	r25
 dc0:	81 95       	neg	r24
 dc2:	9f 4f       	sbci	r25, 0xFF	; 255
 dc4:	08 95       	ret

00000dc6 <itoa>:
 dc6:	fb 01       	movw	r30, r22
 dc8:	9f 01       	movw	r18, r30
 dca:	e8 94       	clt
 dcc:	42 30       	cpi	r20, 0x02	; 2
 dce:	c4 f0       	brlt	.+48     	; 0xe00 <itoa+0x3a>
 dd0:	45 32       	cpi	r20, 0x25	; 37
 dd2:	b4 f4       	brge	.+44     	; 0xe00 <itoa+0x3a>
 dd4:	4a 30       	cpi	r20, 0x0A	; 10
 dd6:	29 f4       	brne	.+10     	; 0xde2 <itoa+0x1c>
 dd8:	97 fb       	bst	r25, 7
 dda:	1e f4       	brtc	.+6      	; 0xde2 <itoa+0x1c>
 ddc:	90 95       	com	r25
 dde:	81 95       	neg	r24
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	64 2f       	mov	r22, r20
 de4:	77 27       	eor	r23, r23
 de6:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodhi4>
 dea:	80 5d       	subi	r24, 0xD0	; 208
 dec:	8a 33       	cpi	r24, 0x3A	; 58
 dee:	0c f0       	brlt	.+2      	; 0xdf2 <itoa+0x2c>
 df0:	89 5d       	subi	r24, 0xD9	; 217
 df2:	81 93       	st	Z+, r24
 df4:	cb 01       	movw	r24, r22
 df6:	00 97       	sbiw	r24, 0x00	; 0
 df8:	a1 f7       	brne	.-24     	; 0xde2 <itoa+0x1c>
 dfa:	16 f4       	brtc	.+4      	; 0xe00 <itoa+0x3a>
 dfc:	5d e2       	ldi	r21, 0x2D	; 45
 dfe:	51 93       	st	Z+, r21
 e00:	10 82       	st	Z, r1
 e02:	c9 01       	movw	r24, r18
 e04:	0c 94 04 07 	jmp	0xe08	; 0xe08 <strrev>

00000e08 <strrev>:
 e08:	dc 01       	movw	r26, r24
 e0a:	fc 01       	movw	r30, r24
 e0c:	67 2f       	mov	r22, r23
 e0e:	71 91       	ld	r23, Z+
 e10:	77 23       	and	r23, r23
 e12:	e1 f7       	brne	.-8      	; 0xe0c <strrev+0x4>
 e14:	32 97       	sbiw	r30, 0x02	; 2
 e16:	04 c0       	rjmp	.+8      	; 0xe20 <strrev+0x18>
 e18:	7c 91       	ld	r23, X
 e1a:	6d 93       	st	X+, r22
 e1c:	70 83       	st	Z, r23
 e1e:	62 91       	ld	r22, -Z
 e20:	ae 17       	cp	r26, r30
 e22:	bf 07       	cpc	r27, r31
 e24:	c8 f3       	brcs	.-14     	; 0xe18 <strrev+0x10>
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
