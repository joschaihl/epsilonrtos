
epsilonRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800104  00800104  000005d8  2**0
                  ALLOC
  3 .stab         000015cc  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfe  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	35 c1       	rjmp	.+618    	; 0x276 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	11 e0       	ldi	r17, 0x01	; 1
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 ea       	ldi	r30, 0xA0	; 160
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 30       	cpi	r26, 0x04	; 4
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a4 e0       	ldi	r26, 0x04	; 4
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 31       	cpi	r26, 0x16	; 22
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	d0 d1       	rcall	.+928    	; 0x3f2 <main>
  52:	24 c2       	rjmp	.+1096   	; 0x49c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <initTask>:
TIME currentTime = {0, 0, 0, 0, 0};

SCHEDULER currentScheduler;

void initTask(TASK *task)
{
  56:	fc 01       	movw	r30, r24
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
  58:	85 85       	ldd	r24, Z+13	; 0x0d
  5a:	88 23       	and	r24, r24
  5c:	39 f0       	breq	.+14     	; 0x6c <initTask+0x16>
  5e:	08 95       	ret
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
       {
          task->stack[i] = 0;
  60:	d9 01       	movw	r26, r18
  62:	a4 0f       	add	r26, r20
  64:	b5 1f       	adc	r27, r21
  66:	1c 92       	st	X, r1
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
  68:	67 2f       	mov	r22, r23
  6a:	01 c0       	rjmp	.+2      	; 0x6e <initTask+0x18>

void initTask(TASK *task)
{
   u08 i, pc_high, pc_low;
	
	if(task->taskState == TASK_UNINITIALIZED)
  6c:	60 e0       	ldi	r22, 0x00	; 0
	{
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
  6e:	46 2f       	mov	r20, r22
  70:	50 e0       	ldi	r21, 0x00	; 0
  72:	80 85       	ldd	r24, Z+8	; 0x08
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	02 97       	sbiw	r24, 0x02	; 2
  78:	24 81       	ldd	r18, Z+4	; 0x04
  7a:	35 81       	ldd	r19, Z+5	; 0x05
  7c:	76 2f       	mov	r23, r22
  7e:	7f 5f       	subi	r23, 0xFF	; 255
  80:	48 17       	cp	r20, r24
  82:	59 07       	cpc	r21, r25
  84:	6c f3       	brlt	.-38     	; 0x60 <initTask+0xa>
       {
          task->stack[i] = 0;
       }
       pc_high = (task->programmCounter >> 8);
  86:	82 81       	ldd	r24, Z+2	; 0x02
  88:	93 81       	ldd	r25, Z+3	; 0x03
       pc_low =  0xff & task->programmCounter;
       i++;
       task->stack[i] = pc_high;
  8a:	d9 01       	movw	r26, r18
  8c:	a7 0f       	add	r26, r23
  8e:	b1 1d       	adc	r27, r1
		 // Set Stack Address
       for(i = 0; i < (task->stackSize -2); i++)
       {
          task->stack[i] = 0;
       }
       pc_high = (task->programmCounter >> 8);
  90:	9c 93       	st	X, r25
       pc_low =  0xff & task->programmCounter;
       i++;
       task->stack[i] = pc_high;
       i++;
  92:	6e 5f       	subi	r22, 0xFE	; 254
       task->stack[i] = pc_low;
  94:	a4 81       	ldd	r26, Z+4	; 0x04
  96:	b5 81       	ldd	r27, Z+5	; 0x05
  98:	a6 0f       	add	r26, r22
  9a:	b1 1d       	adc	r27, r1
       for(i = 0; i < (task->stackSize -2); i++)
       {
          task->stack[i] = 0;
       }
       pc_high = (task->programmCounter >> 8);
       pc_low =  0xff & task->programmCounter;
  9c:	8c 93       	st	X, r24
       i++;
       task->stack[i] = pc_high;
       i++;
       task->stack[i] = pc_low;
		 // Set Task Ready
		 task->taskState = TASK_RUNNING;		
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	85 87       	std	Z+13, r24	; 0x0d
  a2:	08 95       	ret

000000a4 <sleep>:

void sleep(u32 pause_us)
{
	TASK *task;
	BOOL pause = FALSE;
	task = currentScheduler.tasks[currentScheduler.current_task];
  a4:	20 91 0d 01 	lds	r18, 0x010D
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	e0 91 0b 01 	lds	r30, 0x010B
  b2:	f0 91 0c 01 	lds	r31, 0x010C
  b6:	e2 0f       	add	r30, r18
  b8:	f3 1f       	adc	r31, r19
  ba:	01 90       	ld	r0, Z+
  bc:	f0 81       	ld	r31, Z
  be:	e0 2d       	mov	r30, r0
	//if(task->taskState == TASK_RUNNING)
	//{
	  // cli();
		task->pause_us = pause_us;
  c0:	61 87       	std	Z+9, r22	; 0x09
  c2:	72 87       	std	Z+10, r23	; 0x0a
  c4:	83 87       	std	Z+11, r24	; 0x0b
  c6:	94 87       	std	Z+12, r25	; 0x0c
		task->taskState = TASK_PAUSE;
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	85 87       	std	Z+13, r24	; 0x0d
  cc:	ff cf       	rjmp	.-2      	; 0xcc <sleep+0x28>

000000ce <decrementPause>:
		} while(pause);
	//}
}

void decrementPause(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
  d2:	30 91 0e 01 	lds	r19, 0x010E
  d6:	c0 91 0b 01 	lds	r28, 0x010B
  da:	d0 91 0c 01 	lds	r29, 0x010C
  de:	20 e0       	ldi	r18, 0x00	; 0
		if(task->taskState == TASK_PAUSE)
		{
      	if(task->pause_us <= TIMER_DELAY_US)
      	{
      		task->pause_us = 0;
      		task->taskState = TASK_RUNNING;
  e0:	41 e0       	ldi	r20, 0x01	; 1

void decrementPause(void)
{
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
  e2:	1d c0       	rjmp	.+58     	; 0x11e <decrementPause+0x50>
	{
		task = currentScheduler.tasks[i];
  e4:	e9 91       	ld	r30, Y+
  e6:	f9 91       	ld	r31, Y+
		if(task->taskState == TASK_PAUSE)
  e8:	85 85       	ldd	r24, Z+13	; 0x0d
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	b9 f4       	brne	.+46     	; 0x11c <decrementPause+0x4e>
		{
      	if(task->pause_us <= TIMER_DELAY_US)
  ee:	81 85       	ldd	r24, Z+9	; 0x09
  f0:	92 85       	ldd	r25, Z+10	; 0x0a
  f2:	a3 85       	ldd	r26, Z+11	; 0x0b
  f4:	b4 85       	ldd	r27, Z+12	; 0x0c
  f6:	8b 3f       	cpi	r24, 0xFB	; 251
  f8:	91 05       	cpc	r25, r1
  fa:	a1 05       	cpc	r26, r1
  fc:	b1 05       	cpc	r27, r1
  fe:	30 f4       	brcc	.+12     	; 0x10c <decrementPause+0x3e>
      	{
      		task->pause_us = 0;
 100:	11 86       	std	Z+9, r1	; 0x09
 102:	12 86       	std	Z+10, r1	; 0x0a
 104:	13 86       	std	Z+11, r1	; 0x0b
 106:	14 86       	std	Z+12, r1	; 0x0c
      		task->taskState = TASK_RUNNING;
 108:	45 87       	std	Z+13, r20	; 0x0d
 10a:	08 c0       	rjmp	.+16     	; 0x11c <decrementPause+0x4e>
      	}
      	else
      	{
      		task->pause_us -= TIMER_DELAY_US;
 10c:	8a 5f       	subi	r24, 0xFA	; 250
 10e:	91 09       	sbc	r25, r1
 110:	a1 09       	sbc	r26, r1
 112:	b1 09       	sbc	r27, r1
 114:	81 87       	std	Z+9, r24	; 0x09
 116:	92 87       	std	Z+10, r25	; 0x0a
 118:	a3 87       	std	Z+11, r26	; 0x0b
 11a:	b4 87       	std	Z+12, r27	; 0x0c

void decrementPause(void)
{
   u08 i;
   TASK *task;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	23 13       	cpse	r18, r19
 120:	e1 cf       	rjmp	.-62     	; 0xe4 <decrementPause+0x16>
      	{
      		task->pause_us -= TIMER_DELAY_US;
      	}
      }
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <allTasksFinished>:
BOOL allTasksFinished(void)
{
   u08 i;
   TASK *task;
   BOOL result = TRUE;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 128:	90 91 0e 01 	lds	r25, 0x010E
 12c:	e0 91 0b 01 	lds	r30, 0x010B
 130:	f0 91 0c 01 	lds	r31, 0x010C
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	07 c0       	rjmp	.+14     	; 0x146 <allTasksFinished+0x1e>
	{
		task = currentScheduler.tasks[i];
 138:	a1 91       	ld	r26, Z+
 13a:	b1 91       	ld	r27, Z+
		if(task->taskState != TASK_FINISHED)
 13c:	1d 96       	adiw	r26, 0x0d	; 13
 13e:	2c 91       	ld	r18, X
 140:	23 30       	cpi	r18, 0x03	; 3
 142:	29 f4       	brne	.+10     	; 0x14e <allTasksFinished+0x26>
BOOL allTasksFinished(void)
{
   u08 i;
   TASK *task;
   BOOL result = TRUE;
	for(i = 0;	i < currentScheduler.tasks_length; i++)
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	89 13       	cpse	r24, r25
 148:	f7 cf       	rjmp	.-18     	; 0x138 <allTasksFinished+0x10>

BOOL allTasksFinished(void)
{
   u08 i;
   TASK *task;
   BOOL result = TRUE;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	08 95       	ret
	for(i = 0;	i < currentScheduler.tasks_length; i++)
	{
		task = currentScheduler.tasks[i];
		if(task->taskState != TASK_FINISHED)
		{
			result = FALSE;
 14e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return (result);
}
 150:	08 95       	ret

00000152 <startRRScheduler>:

void startRRScheduler(TASK **tasks, u08 tasks_length)
{
	currentScheduler.stackPointer = SP + 7;
 152:	2d b7       	in	r18, 0x3d	; 61
 154:	3e b7       	in	r19, 0x3e	; 62
 156:	29 5f       	subi	r18, 0xF9	; 249
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	30 93 10 01 	sts	0x0110, r19
 15e:	20 93 0f 01 	sts	0x010F, r18
   TASK *task;
	currentScheduler.current_task = 0;
 162:	10 92 0d 01 	sts	0x010D, r1
	currentScheduler.tasks = tasks;
 166:	90 93 0c 01 	sts	0x010C, r25
 16a:	80 93 0b 01 	sts	0x010B, r24
	currentScheduler.tasks_length = tasks_length;
 16e:	60 93 0e 01 	sts	0x010E, r22

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
 172:	0d c0       	rjmp	.+26     	; 0x18e <__stack+0x2f>
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ea 0f       	add	r30, r26
 17c:	fb 1f       	adc	r31, r27
      initTask(task);
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	69 df       	rcall	.-302    	; 0x56 <initTask>
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
			currentScheduler.current_task++)
 184:	80 91 0d 01 	lds	r24, 0x010D
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 0d 01 	sts	0x010D, r24
	currentScheduler.tasks = tasks;
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
			currentScheduler.current_task < currentScheduler.tasks_length;
 18e:	e0 91 0d 01 	lds	r30, 0x010D
	currentScheduler.current_task = 0;
	currentScheduler.tasks = tasks;
	currentScheduler.tasks_length = tasks_length;

	// Inititalize Tasks
	for(currentScheduler.current_task = 0;
 192:	80 91 0e 01 	lds	r24, 0x010E
 196:	a0 91 0b 01 	lds	r26, 0x010B
 19a:	b0 91 0c 01 	lds	r27, 0x010C
 19e:	e8 17       	cp	r30, r24
 1a0:	48 f3       	brcs	.-46     	; 0x174 <__stack+0x15>
			currentScheduler.current_task++)
	{
		task = currentScheduler.tasks[currentScheduler.current_task];
      initTask(task);
	}
	currentScheduler.current_task = 0;
 1a2:	10 92 0d 01 	sts	0x010D, r1
   task = currentScheduler.tasks[0];
 1a6:	ed 91       	ld	r30, X+
 1a8:	fc 91       	ld	r31, X
	initTimer();
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	8a bd       	out	0x2a, r24	; 42
 1ae:	89 bf       	out	0x39, r24	; 57
 1b0:	78 94       	sei

	set_stackpointer(task->stackPointer + WORKING_REGISTERS);
 1b2:	86 81       	ldd	r24, Z+6	; 0x06
 1b4:	97 81       	ldd	r25, Z+7	; 0x07
 1b6:	80 96       	adiw	r24, 0x20	; 32
 1b8:	9e bf       	out	0x3e, r25	; 62
 1ba:	8d bf       	out	0x3d, r24	; 61
	task->taskFunction();
 1bc:	01 90       	ld	r0, Z+
 1be:	f0 81       	ld	r31, Z
 1c0:	e0 2d       	mov	r30, r0
 1c2:	09 94       	ijmp

000001c4 <nextScheduleItem>:
	}
	for(i=0; i < currentScheduler.current_task; i++)
	{
		task = currentScheduler.tasks[i];
	}           */
	if (currentScheduler.current_task < (currentScheduler.tasks_length -1))
 1c4:	40 91 0d 01 	lds	r20, 0x010D
 1c8:	24 2f       	mov	r18, r20
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	80 91 0e 01 	lds	r24, 0x010E
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	28 17       	cp	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	24 f4       	brge	.+8      	; 0x1e2 <nextScheduleItem+0x1e>
	{
		currentScheduler.current_task++;
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	40 93 0d 01 	sts	0x010D, r20
 1e0:	08 95       	ret
	}
	else
	{
		currentScheduler.current_task = 0;
 1e2:	10 92 0d 01 	sts	0x010D, r1
 1e6:	08 95       	ret

000001e8 <incrementTime>:
	}
	// (pop) reset task specific registers
}

void incrementTime(void)
{
 1e8:	cf 93       	push	r28
   if((currentTime.us+TIMER_DELAY_US)==1000)
 1ea:	20 91 09 01 	lds	r18, 0x0109
 1ee:	30 91 0a 01 	lds	r19, 0x010A
 1f2:	2e 3e       	cpi	r18, 0xEE	; 238
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	38 07       	cpc	r19, r24
 1f8:	91 f5       	brne	.+100    	; 0x25e <incrementTime+0x76>
   {
   	if((currentTime.ms+1)==1000)
 1fa:	e0 91 07 01 	lds	r30, 0x0107
 1fe:	f0 91 08 01 	lds	r31, 0x0108
 202:	e7 3e       	cpi	r30, 0xE7	; 231
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	f8 07       	cpc	r31, r24
 208:	09 f5       	brne	.+66     	; 0x24c <incrementTime+0x64>
   	{
   	   if((currentTime.seconds+1)==60)
 20a:	40 91 06 01 	lds	r20, 0x0106
 20e:	4b 33       	cpi	r20, 0x3B	; 59
 210:	a9 f4       	brne	.+42     	; 0x23c <incrementTime+0x54>
   	   {
   	   	if((currentTime.minutes+1)==60)
 212:	c0 91 05 01 	lds	r28, 0x0105
 216:	cb 33       	cpi	r28, 0x3B	; 59
 218:	49 f4       	brne	.+18     	; 0x22c <incrementTime+0x44>
   	   	{
   	   		currentTime.hours = (currentTime.hours+1) % 24;
 21a:	80 91 04 01 	lds	r24, 0x0104
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	68 e1       	ldi	r22, 0x18	; 24
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	27 d1       	rcall	.+590    	; 0x476 <__divmodhi4>
 228:	80 93 04 01 	sts	0x0104, r24
   	   	}
   	   	currentTime.minutes = (currentTime.minutes+1) % 60;
 22c:	8c 2f       	mov	r24, r28
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	6c e3       	ldi	r22, 0x3C	; 60
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	1f d1       	rcall	.+574    	; 0x476 <__divmodhi4>
 238:	80 93 05 01 	sts	0x0105, r24
   	   }
   	   currentTime.seconds = (currentTime.seconds+1) % 60;
 23c:	84 2f       	mov	r24, r20
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	6c e3       	ldi	r22, 0x3C	; 60
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	17 d1       	rcall	.+558    	; 0x476 <__divmodhi4>
 248:	80 93 06 01 	sts	0x0106, r24
   	}
   	currentTime.ms = (currentTime.ms+1) % 1000;
 24c:	cf 01       	movw	r24, r30
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	68 ee       	ldi	r22, 0xE8	; 232
 252:	73 e0       	ldi	r23, 0x03	; 3
 254:	fc d0       	rcall	.+504    	; 0x44e <__udivmodhi4>
 256:	90 93 08 01 	sts	0x0108, r25
 25a:	80 93 07 01 	sts	0x0107, r24
   }
   currentTime.us = (currentTime.us+TIMER_DELAY_US) % 1000;
 25e:	c9 01       	movw	r24, r18
 260:	86 50       	subi	r24, 0x06	; 6
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	68 ee       	ldi	r22, 0xE8	; 232
 266:	73 e0       	ldi	r23, 0x03	; 3
 268:	f2 d0       	rcall	.+484    	; 0x44e <__udivmodhi4>
 26a:	90 93 0a 01 	sts	0x010A, r25
 26e:	80 93 09 01 	sts	0x0109, r24
}
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <__vector_5>:

SCHEDULER_TIMER()
{  // Testen ob nicht alle Tasks beendet worden sind
	// falls ja:
	if(!allTasksFinished())
 276:	58 df       	rcall	.-336    	; 0x128 <allTasksFinished>
 278:	81 11       	cpse	r24, r1
 27a:	68 c0       	rjmp	.+208    	; 0x34c <__vector_5+0xd6>
	{
   	save_registers();
 27c:	0f 92       	push	r0
 27e:	1f 92       	push	r1
 280:	2f 92       	push	r2
 282:	3f 92       	push	r3
 284:	4f 92       	push	r4
 286:	5f 92       	push	r5
 288:	6f 92       	push	r6
 28a:	7f 92       	push	r7
 28c:	8f 92       	push	r8
 28e:	9f 92       	push	r9
 290:	af 92       	push	r10
 292:	bf 92       	push	r11
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
		TASK *task;
		task = currentScheduler.tasks[currentScheduler.current_task];

	// Stackpointer vom letzten task sichern
		task->stackPointer = get_stackpointer();
 2bc:	2d b7       	in	r18, 0x3d	; 61
 2be:	3e b7       	in	r19, 0x3e	; 62
	// falls ja:
	if(!allTasksFinished())
	{
   	save_registers();
		TASK *task;
		task = currentScheduler.tasks[currentScheduler.current_task];
 2c0:	80 91 0d 01 	lds	r24, 0x010D
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	e0 91 0b 01 	lds	r30, 0x010B
 2ce:	f0 91 0c 01 	lds	r31, 0x010C
 2d2:	e8 0f       	add	r30, r24
 2d4:	f9 1f       	adc	r31, r25

	// Stackpointer vom letzten task sichern
		task->stackPointer = get_stackpointer();
 2d6:	01 90       	ld	r0, Z+
 2d8:	f0 81       	ld	r31, Z
 2da:	e0 2d       	mov	r30, r0
 2dc:	37 83       	std	Z+7, r19	; 0x07
 2de:	26 83       	std	Z+6, r18	; 0x06
		incrementTime();
 2e0:	83 df       	rcall	.-250    	; 0x1e8 <incrementTime>
		decrementPause();
 2e2:	f5 de       	rcall	.-534    	; 0xce <decrementPause>

	
		nextScheduleItem();
 2e4:	6f df       	rcall	.-290    	; 0x1c4 <nextScheduleItem>
  		task = currentScheduler.tasks[currentScheduler.current_task];
 2e6:	80 91 0d 01 	lds	r24, 0x010D
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	e0 91 0b 01 	lds	r30, 0x010B
 2f4:	f0 91 0c 01 	lds	r31, 0x010C
 2f8:	e8 0f       	add	r30, r24
 2fa:	f9 1f       	adc	r31, r25
		set_stackpointer(task->stackPointer);
 2fc:	01 90       	ld	r0, Z+
 2fe:	f0 81       	ld	r31, Z
 300:	e0 2d       	mov	r30, r0
 302:	86 81       	ldd	r24, Z+6	; 0x06
 304:	97 81       	ldd	r25, Z+7	; 0x07
 306:	9e bf       	out	0x3e, r25	; 62
 308:	8d bf       	out	0x3d, r24	; 61
		load_registers();
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	bf 90       	pop	r11
 334:	af 90       	pop	r10
 336:	9f 90       	pop	r9
 338:	8f 90       	pop	r8
 33a:	7f 90       	pop	r7
 33c:	6f 90       	pop	r6
 33e:	5f 90       	pop	r5
 340:	4f 90       	pop	r4
 342:	3f 90       	pop	r3
 344:	2f 90       	pop	r2
 346:	1f 90       	pop	r1
 348:	0f 90       	pop	r0
 34a:	07 c0       	rjmp	.+14     	; 0x35a <__vector_5+0xe4>
	}
	else
	{ /* Kein Task mehr da */
	 	// Stackpointer setzen
		set_stackpointer(currentScheduler.stackPointer);
 34c:	80 91 0f 01 	lds	r24, 0x010F
 350:	90 91 10 01 	lds	r25, 0x0110
 354:	9e bf       	out	0x3e, r25	; 62
 356:	8d bf       	out	0x3d, r24	; 61
		// Timer deaktivieren
		disableTimer();
 358:	19 be       	out	0x39, r1	; 57
	}
   return_interrupt();
 35a:	18 95       	reti

0000035c <task_A>:
}

u32 a;
TASK(A,32)
{
	for(a=0;a < 100000;a++)
 35c:	10 92 12 01 	sts	0x0112, r1
 360:	10 92 13 01 	sts	0x0113, r1
 364:	10 92 14 01 	sts	0x0114, r1
 368:	10 92 15 01 	sts	0x0115, r1
 36c:	0d c0       	rjmp	.+26     	; 0x388 <task_A+0x2c>
	{
		sbi(DEFAULTPORT, TASKAPIN);
 36e:	c0 9a       	sbi	0x18, 0	; 24
		cbi(DEFAULTPORT, TASKAPIN);
 370:	c0 98       	cbi	0x18, 0	; 24
}

u32 a;
TASK(A,32)
{
	for(a=0;a < 100000;a++)
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	a1 1d       	adc	r26, r1
 376:	b1 1d       	adc	r27, r1
 378:	80 93 12 01 	sts	0x0112, r24
 37c:	90 93 13 01 	sts	0x0113, r25
 380:	a0 93 14 01 	sts	0x0114, r26
 384:	b0 93 15 01 	sts	0x0115, r27
 388:	80 91 12 01 	lds	r24, 0x0112
 38c:	90 91 13 01 	lds	r25, 0x0113
 390:	a0 91 14 01 	lds	r26, 0x0114
 394:	b0 91 15 01 	lds	r27, 0x0115
 398:	80 3a       	cpi	r24, 0xA0	; 160
 39a:	26 e8       	ldi	r18, 0x86	; 134
 39c:	92 07       	cpc	r25, r18
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	a2 07       	cpc	r26, r18
 3a2:	b1 05       	cpc	r27, r1
 3a4:	20 f3       	brcs	.-56     	; 0x36e <task_A+0x12>
	{
		sbi(DEFAULTPORT, TASKAPIN);
		cbi(DEFAULTPORT, TASKAPIN);
  	}
  	ENDTASK(A);
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	80 93 c1 00 	sts	0x00C1, r24
 3ac:	00 00       	nop
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <task_A+0x50>

000003b0 <task_B>:

u08 b;
TASK(B,32)
{
   u08 i;
	for(b=0;b<2;b++)
 3b0:	10 92 11 01 	sts	0x0111, r1
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <task_B+0x24>
 3b6:	84 e6       	ldi	r24, 0x64	; 100
	{
	   for(i=0; i < 100; i++)
	   {
			sbi(DEFAULTPORT, TASKBPIN);
 3b8:	c1 9a       	sbi	0x18, 1	; 24
			cbi(DEFAULTPORT, TASKBPIN);
 3ba:	c1 98       	cbi	0x18, 1	; 24
 3bc:	81 50       	subi	r24, 0x01	; 1
TASK(B,32)
{
   u08 i;
	for(b=0;b<2;b++)
	{
	   for(i=0; i < 100; i++)
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <task_B+0x8>
	   {
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
 3c0:	60 e2       	ldi	r22, 0x20	; 32
 3c2:	7e e4       	ldi	r23, 0x4E	; 78
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	6d de       	rcall	.-806    	; 0xa4 <sleep>

u08 b;
TASK(B,32)
{
   u08 i;
	for(b=0;b<2;b++)
 3ca:	80 91 11 01 	lds	r24, 0x0111
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	80 93 11 01 	sts	0x0111, r24
 3d4:	80 91 11 01 	lds	r24, 0x0111
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	68 f3       	brcs	.-38     	; 0x3b6 <task_B+0x6>
			sbi(DEFAULTPORT, TASKBPIN);
			cbi(DEFAULTPORT, TASKBPIN);
		}
		sleep(20000);
  	}
  	ENDTASK(B);
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	80 93 71 00 	sts	0x0071, r24
 3e2:	00 00       	nop
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <task_B+0x32>

000003e6 <setup>:



void setup(void)
{
  sbi(DEFAULTDDR, TASKAPIN);
 3e6:	b8 9a       	sbi	0x17, 0	; 23
  sbi(DEFAULTDDR, TASKBPIN);
 3e8:	b9 9a       	sbi	0x17, 1	; 23
  sbi(DEFAULTDDR, TASKCPIN);
 3ea:	ba 9a       	sbi	0x17, 2	; 23
  sbi(DEFAULTDDR, TASKDPIN);
 3ec:	bb 9a       	sbi	0x17, 3	; 23
  sbi(DEFAULTDDR, TASKEPIN);
 3ee:	bc 9a       	sbi	0x17, 4	; 23
 3f0:	08 95       	ret

000003f2 <main>:
TASK *taskset[] = {&taskobj_A, &taskobj_B/*, &taskobj_C, &taskobj_D*/};

int main(void)
{

   INIT_RTOS();
 3f2:	8f e5       	ldi	r24, 0x5F	; 95
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	9e bf       	out	0x3e, r25	; 62
 3f8:	8d bf       	out	0x3d, r24	; 61
 3fa:	00 24       	eor	r0, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	22 24       	eor	r2, r2
 400:	33 24       	eor	r3, r3
 402:	44 24       	eor	r4, r4
 404:	55 24       	eor	r5, r5
 406:	66 24       	eor	r6, r6
 408:	77 24       	eor	r7, r7
 40a:	88 24       	eor	r8, r8
 40c:	99 24       	eor	r9, r9
 40e:	aa 24       	eor	r10, r10
 410:	bb 24       	eor	r11, r11
 412:	cc 24       	eor	r12, r12
 414:	dd 24       	eor	r13, r13
 416:	ee 24       	eor	r14, r14
 418:	ff 24       	eor	r15, r15
 41a:	00 27       	eor	r16, r16
 41c:	11 27       	eor	r17, r17
 41e:	22 27       	eor	r18, r18
 420:	33 27       	eor	r19, r19
 422:	44 27       	eor	r20, r20
 424:	55 27       	eor	r21, r21
 426:	66 27       	eor	r22, r22
 428:	77 27       	eor	r23, r23
 42a:	88 27       	eor	r24, r24
 42c:	99 27       	eor	r25, r25
 42e:	aa 27       	eor	r26, r26
 430:	bb 27       	eor	r27, r27
 432:	cc 27       	eor	r28, r28
 434:	dd 27       	eor	r29, r29
 436:	ee 27       	eor	r30, r30
 438:	ff 27       	eor	r31, r31

	setup();
 43a:	d5 df       	rcall	.-86     	; 0x3e6 <setup>
   	sbi(DEFAULTPORT, TASKDPIN);
 43c:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DEFAULTPORT, TASKDPIN);
 43e:	c3 98       	cbi	0x18, 3	; 24

	startRRScheduler(taskset, TASK_AMOUNT);
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	80 e6       	ldi	r24, 0x60	; 96
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	85 de       	rcall	.-758    	; 0x152 <startRRScheduler>
	
	while(1)
	{
		sbi(DEFAULTPORT, TASKDPIN);
 448:	c3 9a       	sbi	0x18, 3	; 24
		cbi(DEFAULTPORT, TASKDPIN);
 44a:	c3 98       	cbi	0x18, 3	; 24
 44c:	fd cf       	rjmp	.-6      	; 0x448 <main+0x56>

0000044e <__udivmodhi4>:
 44e:	aa 1b       	sub	r26, r26
 450:	bb 1b       	sub	r27, r27
 452:	51 e1       	ldi	r21, 0x11	; 17
 454:	07 c0       	rjmp	.+14     	; 0x464 <__udivmodhi4_ep>

00000456 <__udivmodhi4_loop>:
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	a6 17       	cp	r26, r22
 45c:	b7 07       	cpc	r27, r23
 45e:	10 f0       	brcs	.+4      	; 0x464 <__udivmodhi4_ep>
 460:	a6 1b       	sub	r26, r22
 462:	b7 0b       	sbc	r27, r23

00000464 <__udivmodhi4_ep>:
 464:	88 1f       	adc	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	5a 95       	dec	r21
 46a:	a9 f7       	brne	.-22     	; 0x456 <__udivmodhi4_loop>
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	bc 01       	movw	r22, r24
 472:	cd 01       	movw	r24, r26
 474:	08 95       	ret

00000476 <__divmodhi4>:
 476:	97 fb       	bst	r25, 7
 478:	07 2e       	mov	r0, r23
 47a:	16 f4       	brtc	.+4      	; 0x480 <__divmodhi4+0xa>
 47c:	00 94       	com	r0
 47e:	06 d0       	rcall	.+12     	; 0x48c <__divmodhi4_neg1>
 480:	77 fd       	sbrc	r23, 7
 482:	08 d0       	rcall	.+16     	; 0x494 <__divmodhi4_neg2>
 484:	e4 df       	rcall	.-56     	; 0x44e <__udivmodhi4>
 486:	07 fc       	sbrc	r0, 7
 488:	05 d0       	rcall	.+10     	; 0x494 <__divmodhi4_neg2>
 48a:	3e f4       	brtc	.+14     	; 0x49a <__divmodhi4_exit>

0000048c <__divmodhi4_neg1>:
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	08 95       	ret

00000494 <__divmodhi4_neg2>:
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255

0000049a <__divmodhi4_exit>:
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
